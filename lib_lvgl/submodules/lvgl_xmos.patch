diff --git a/demos/benchmark/lv_demo_benchmark.c b/demos/benchmark/lv_demo_benchmark.c
index 7c0d41abd..b44096c41 100644
--- a/demos/benchmark/lv_demo_benchmark.c
+++ b/demos/benchmark/lv_demo_benchmark.c
@@ -38,6 +38,7 @@
 
 typedef struct {
     const char * name;
+    __attribute__(( fptrgroup("lv_scene_create_cb") ))
     void (*create_cb)(void);
     uint32_t scene_time;
     uint32_t cpu_avg_usage;
@@ -72,11 +73,13 @@ static void arc_anim(lv_obj_t * obj);
 
 static lv_obj_t * card_create(void);
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void empty_screen_cb(void)
 {
     color_anim(lv_screen_active());
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void moving_wallpaper_cb(void)
 {
     lv_obj_set_style_pad_all(lv_screen_active(), 0, 0);
@@ -89,6 +92,7 @@ static void moving_wallpaper_cb(void)
     shake_anim(img, - lv_display_get_vertical_resolution(NULL) / 3);
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void single_rectangle_cb(void)
 {
     lv_obj_t * obj = lv_obj_create(lv_screen_active());
@@ -101,6 +105,7 @@ static void single_rectangle_cb(void)
 
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void multiple_rectangles_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -117,6 +122,7 @@ static void multiple_rectangles_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void multiple_rgb_images_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -143,6 +149,7 @@ static void multiple_rgb_images_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void multiple_argb_images_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -169,6 +176,7 @@ static void multiple_argb_images_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void rotated_argb_image_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -196,6 +204,7 @@ static void rotated_argb_image_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void multiple_labels_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -219,6 +228,7 @@ static void multiple_labels_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void screen_sized_text_cb(void)
 {
     const char * txt =
@@ -239,6 +249,7 @@ static void screen_sized_text_cb(void)
     scroll_anim(scr, lv_obj_get_scroll_bottom(scr));
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void multiple_arcs_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -274,6 +285,7 @@ static void multiple_arcs_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void containers_cb(void)
 {
 
@@ -297,6 +309,7 @@ static void containers_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void containers_with_overlay_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -322,6 +335,7 @@ static void containers_with_overlay_cb(void)
     color_anim(lv_layer_top());
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void containers_with_opa_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -345,6 +359,7 @@ static void containers_with_opa_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void containers_with_opa_layer_cb(void)
 {
     lv_obj_set_flex_flow(lv_screen_active(), LV_FLEX_FLOW_ROW_WRAP);
@@ -368,6 +383,7 @@ static void containers_with_opa_layer_cb(void)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void containers_with_scrolling_cb(void)
 {
     lv_obj_t * scr = lv_screen_active();
@@ -384,6 +400,7 @@ static void containers_with_scrolling_cb(void)
     scroll_anim(scr, lv_obj_get_scroll_bottom(scr));
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void widgets_demo_cb(void)
 {
     lv_obj_t * scr = lv_screen_active();
@@ -431,7 +448,7 @@ static uint32_t rnd_act;
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_benchmark(void)
 {
     scene_act = 0;
diff --git a/demos/flex_layout/lv_demo_flex_layout_main.c b/demos/flex_layout/lv_demo_flex_layout_main.c
index e6bfd352d..670f58342 100644
--- a/demos/flex_layout/lv_demo_flex_layout_main.c
+++ b/demos/flex_layout/lv_demo_flex_layout_main.c
@@ -37,7 +37,7 @@ static view_t view;
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_flex_layout(void)
 {
     view_create(lv_screen_active(), &view);
diff --git a/demos/keypad_encoder/lv_demo_keypad_encoder.c b/demos/keypad_encoder/lv_demo_keypad_encoder.c
index 26979ef52..9b05160d1 100644
--- a/demos/keypad_encoder/lv_demo_keypad_encoder.c
+++ b/demos/keypad_encoder/lv_demo_keypad_encoder.c
@@ -43,7 +43,7 @@ static lv_obj_t * t2;
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_keypad_encoder(void)
 {
     g = lv_group_create();
@@ -189,6 +189,7 @@ static void msgbox_event_cb(lv_event_t * e)
     lv_obj_scroll_to(t1, 0, 0, LV_ANIM_OFF);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void ta_event_cb(lv_event_t * e)
 {
     lv_indev_t * indev = lv_indev_active();
diff --git a/demos/lv_demos.c b/demos/lv_demos.c
index 56af19994..f4ecb9554 100644
--- a/demos/lv_demos.c
+++ b/demos/lv_demos.c
@@ -21,6 +21,7 @@ typedef void (*demo_method_cb)(void);
 
 typedef struct  {
     const char * name;
+    __attribute__(( fptrgroup("lv_demo_entry_cb") ))
     demo_method_cb entry_cb;
 } demo_entry_info_t;
 
diff --git a/demos/multilang/lv_demo_multilang.c b/demos/multilang/lv_demo_multilang.c
index 8bf2de930..3de5af28f 100644
--- a/demos/multilang/lv_demo_multilang.c
+++ b/demos/multilang/lv_demo_multilang.c
@@ -153,6 +153,7 @@ static const void * get_imgfont_path(const lv_font_t * font,
 
 lv_font_t * emoji_font;
 
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_multilang(void)
 {
     emoji_font = lv_imgfont_create(20, get_imgfont_path, NULL);
diff --git a/demos/music/lv_demo_music.c b/demos/music/lv_demo_music.c
index 00e9213dc..bbcaa8723 100644
--- a/demos/music/lv_demo_music.c
+++ b/demos/music/lv_demo_music.c
@@ -113,7 +113,7 @@ static const uint32_t time_list[] = {
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_music(void)
 {
     lv_obj_set_style_bg_color(lv_screen_active(), lv_color_hex(0x343247), 0);
diff --git a/demos/music/lv_demo_music_list.c b/demos/music/lv_demo_music_list.c
index 4af075a74..49dea65b5 100644
--- a/demos/music/lv_demo_music_list.c
+++ b/demos/music/lv_demo_music_list.c
@@ -227,6 +227,7 @@ static lv_obj_t * add_list_button(lv_obj_t * parent, uint32_t track_id)
     return btn;
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void btn_click_event_cb(lv_event_t * e)
 {
     lv_obj_t * btn = lv_event_get_target(e);
diff --git a/demos/render/lv_demo_render.c b/demos/render/lv_demo_render.c
index bccb1b508..876b3547c 100644
--- a/demos/render/lv_demo_render.c
+++ b/demos/render/lv_demo_render.c
@@ -26,6 +26,7 @@
  **********************/
 typedef struct {
     const char * name;
+    __attribute__(( fptrgroup("lv_scene_create_cb") ))
     void (*create_cb)(lv_obj_t * parent);
 } scene_dsc_t;
 
@@ -59,6 +60,7 @@ static lv_obj_t * fill_obj_create(lv_obj_t * parent, int32_t col, int32_t row)
 
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void fill_cb(lv_obj_t * parent)
 {
 
@@ -127,6 +129,7 @@ static lv_obj_t * border_obj_create(lv_obj_t * parent, int32_t col, int32_t row)
 
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void border_cb(lv_obj_t * parent)
 {
     lv_border_side_t sides[] = {
@@ -222,6 +225,7 @@ static lv_obj_t * box_shadow_obj_create(lv_obj_t * parent, int32_t col, int32_t
     return obj;
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void box_shadow_cb(lv_obj_t * parent)
 {
 
@@ -287,6 +291,7 @@ static lv_obj_t * text_obj_create(lv_obj_t * parent, int32_t col, int32_t row)
 
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void text_cb(lv_obj_t * parent)
 {
     lv_obj_t * obj;
@@ -402,21 +407,25 @@ static void image_core_cb(lv_obj_t * parent, bool recolor, uint32_t startAt)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void image_normal_1_cb(lv_obj_t * parent)
 {
     image_core_cb(parent, false, 0);
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void image_recolored_1_cb(lv_obj_t * parent)
 {
     image_core_cb(parent, true, 0);
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void image_normal_2_cb(lv_obj_t * parent)
 {
     image_core_cb(parent, false, 4);
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void image_recolored_2_cb(lv_obj_t * parent)
 {
     image_core_cb(parent, true, 4);
@@ -435,6 +444,7 @@ static lv_obj_t * line_obj_create(lv_obj_t * parent, int32_t col, int32_t row, l
     return obj;
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void line_cb(lv_obj_t * parent)
 {
 
@@ -510,11 +520,13 @@ static void arc_core_cb(lv_obj_t * parent, const void * img_src)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void arc_normal_cb(lv_obj_t * parent)
 {
     arc_core_cb(parent, NULL);
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void arc_image_cb(lv_obj_t * parent)
 {
     LV_IMAGE_DECLARE(img_render_arc_bg);
@@ -568,6 +580,7 @@ static lv_obj_t * triangle_obj_create(lv_obj_t * parent, int32_t col, int32_t ro
     return obj;
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void triangle_cb(lv_obj_t * parent)
 {
     static lv_point_t points[16][3] = {
@@ -710,6 +723,7 @@ static void layer_core_cb(lv_obj_t * parent, lv_blend_mode_t blend_mode)
     }
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void layer_normal_cb(lv_obj_t * parent)
 {
     layer_core_cb(parent, LV_BLEND_MODE_NORMAL);
@@ -768,6 +782,7 @@ static lv_obj_t * create_blend_mode_obj(lv_obj_t * parent, int32_t col, int32_t
     return obj;
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void blend_mode_cb(lv_obj_t * parent)
 {
 
@@ -879,6 +894,7 @@ static lv_obj_t * create_linear_gradient_obj(lv_obj_t * parent, int32_t col, int
     return obj;
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void linear_gradient_cb(lv_obj_t * parent)
 {
     static const int32_t grid_cols[] = { 53, 53, 53, 53, 53, 53, 53, 53, 53, LV_GRID_TEMPLATE_LAST };
@@ -959,6 +975,7 @@ static lv_obj_t * create_radial_gradient_obj(lv_obj_t * parent, int32_t col, int
     return obj;
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void radial_gradient_cb(lv_obj_t * parent)
 {
     static const int32_t grid_cols[] = { 53, 53, 53, 53, 53, 53, 53, 53, 53, LV_GRID_TEMPLATE_LAST };
@@ -1033,6 +1050,7 @@ static lv_obj_t * create_conical_gradient_obj(lv_obj_t * parent, int32_t col, in
     return obj;
 }
 
+__attribute__(( fptrgroup("lv_scene_create_cb") ))
 static void conical_gradient_cb(lv_obj_t * parent)
 {
     static const int32_t grid_cols[] = { 53, 53, 53, 53, 53, 53, 53, 53, 53, LV_GRID_TEMPLATE_LAST };
diff --git a/demos/scroll/lv_demo_scroll.c b/demos/scroll/lv_demo_scroll.c
index 170b0c1e0..bedc71eac 100644
--- a/demos/scroll/lv_demo_scroll.c
+++ b/demos/scroll/lv_demo_scroll.c
@@ -35,6 +35,7 @@ static lv_obj_t * list;
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_scroll(void)
 {
     lv_obj_t * panel = lv_obj_create(lv_screen_active());
diff --git a/demos/stress/lv_demo_stress.c b/demos/stress/lv_demo_stress.c
index 0b01fec79..ef1224eea 100644
--- a/demos/stress/lv_demo_stress.c
+++ b/demos/stress/lv_demo_stress.c
@@ -42,7 +42,7 @@ static int16_t g_state = -1;
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_stress(void)
 {
     LV_LOG_USER("Starting stress test. (< 100 bytes permanent memory leak is normal due to fragmentation)");
diff --git a/demos/transform/lv_demo_transform.c b/demos/transform/lv_demo_transform.c
index 4ecce6d65..a885a1221 100644
--- a/demos/transform/lv_demo_transform.c
+++ b/demos/transform/lv_demo_transform.c
@@ -46,6 +46,7 @@ LV_IMAGE_DECLARE(img_transform_avatar_15);
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_transform(void)
 {
     static const int32_t grid_cols[] = {LV_GRID_CONTENT, 4, LV_GRID_FR(1), LV_GRID_TEMPLATE_LAST};
diff --git a/demos/vector_graphic/lv_demo_vector_graphic.c b/demos/vector_graphic/lv_demo_vector_graphic.c
index 38729da05..fa1786ce6 100644
--- a/demos/vector_graphic/lv_demo_vector_graphic.c
+++ b/demos/vector_graphic/lv_demo_vector_graphic.c
@@ -263,12 +263,13 @@ static void event_cb(lv_event_t * e)
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_vector_graphic_not_buffered(void)
 {
     lv_obj_add_event_cb(lv_screen_active(), event_cb, LV_EVENT_DRAW_MAIN, NULL);
 }
 
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_vector_graphic_buffered(void)
 {
     lv_draw_buf_t * draw_buf = lv_draw_buf_create(WIDTH, HEIGHT, LV_COLOR_FORMAT_ARGB8888, LV_STRIDE_AUTO);
@@ -290,6 +291,7 @@ void lv_demo_vector_graphic_buffered(void)
  **********************/
 #else
 
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_vector_graphic_not_buffered(void)
 {
     /*fallback for online examples*/
@@ -298,6 +300,7 @@ void lv_demo_vector_graphic_not_buffered(void)
     lv_obj_center(label);
 }
 
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_vector_graphic_buffered(void)
 {
     /*fallback for online examples*/
diff --git a/demos/widgets/lv_demo_widgets.c b/demos/widgets/lv_demo_widgets.c
index 21a366d83..d9f410b46 100644
--- a/demos/widgets/lv_demo_widgets.c
+++ b/demos/widgets/lv_demo_widgets.c
@@ -111,7 +111,7 @@ static lv_obj_t * scale3_mbps_label;
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_demo_entry_cb") ))
 void lv_demo_widgets(void)
 {
     if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
@@ -1281,6 +1281,7 @@ static lv_obj_t * create_shop_item(lv_obj_t * parent, const void * img_src, cons
     return cont;
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void ta_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/anim/lv_example_anim_1.c b/examples/anim/lv_example_anim_1.c
index 168f5ad57..f14961b72 100644
--- a/examples/anim/lv_example_anim_1.c
+++ b/examples/anim/lv_example_anim_1.c
@@ -1,11 +1,13 @@
 #include "../lv_examples.h"
 #if LV_BUILD_EXAMPLES && LV_USE_SWITCH
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void anim_x_cb(void * var, int32_t v)
 {
     lv_obj_set_x(var, v);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void sw_event_cb(lv_event_t * e)
 {
     lv_obj_t * sw = lv_event_get_target(e);
diff --git a/examples/anim/lv_example_anim_2.c b/examples/anim/lv_example_anim_2.c
index 434e0d1f6..4f340b800 100644
--- a/examples/anim/lv_example_anim_2.c
+++ b/examples/anim/lv_example_anim_2.c
@@ -1,11 +1,13 @@
 #include "../lv_examples.h"
 #if LV_BUILD_EXAMPLES && LV_USE_SWITCH
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void anim_x_cb(void * var, int32_t v)
 {
     lv_obj_set_x(var, v);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void anim_size_cb(void * var, int32_t v)
 {
     lv_obj_set_size(var, v, v);
diff --git a/examples/anim/lv_example_anim_3.c b/examples/anim/lv_example_anim_3.c
index e13ff6122..c53d5eeab 100644
--- a/examples/anim/lv_example_anim_3.c
+++ b/examples/anim/lv_example_anim_3.c
@@ -62,6 +62,7 @@ void lv_example_anim_3(void)
     refer_chart_cubic_bezier();
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 static int32_t anim_path_bezier3_cb(const lv_anim_t * a)
 {
     uint32_t t = lv_map(a->act_time, 0, a->duration, 0, 1024);
@@ -83,6 +84,7 @@ static void refer_chart_cubic_bezier(void)
     lv_chart_refresh(ginfo.chart);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void anim_x_cb(void * var, int32_t v)
 {
     lv_obj_set_style_translate_x(var, v, LV_PART_MAIN);
@@ -96,6 +98,7 @@ static void run_button_event_handler(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void slider_event_cb(lv_event_t * e)
 {
     char buf[16];
diff --git a/examples/anim/lv_example_anim_timeline_1.c b/examples/anim/lv_example_anim_timeline_1.c
index dcb4ef227..cc34aa99a 100644
--- a/examples/anim/lv_example_anim_timeline_1.c
+++ b/examples/anim/lv_example_anim_timeline_1.c
@@ -4,21 +4,25 @@
 static const int32_t obj_width = 90;
 static const int32_t obj_height = 70;
 
+__attribute__(( fptrgroup("lv_anim_custom_exec_cb") ))
 static void set_width(lv_anim_t * var, int32_t v)
 {
     lv_obj_set_width(var->var, v);
 }
 
+__attribute__(( fptrgroup("lv_anim_custom_exec_cb") ))
 static void set_height(lv_anim_t * var, int32_t v)
 {
     lv_obj_set_height(var->var, v);
 }
 
+__attribute__(( fptrgroup("lv_anim_custom_exec_cb") ))
 static void set_slider_value(lv_anim_t * var, int32_t v)
 {
     lv_slider_set_value(var->var, v, LV_ANIM_OFF);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void btn_start_event_handler(lv_event_t * e)
 {
     lv_obj_t * btn = lv_event_get_current_target_obj(e);
@@ -29,12 +33,14 @@ static void btn_start_event_handler(lv_event_t * e)
     lv_anim_timeline_start(anim_timeline);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void btn_pause_event_handler(lv_event_t * e)
 {
     lv_anim_timeline_t * anim_timeline = lv_event_get_user_data(e);
     lv_anim_timeline_pause(anim_timeline);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void slider_prg_event_handler(lv_event_t * e)
 {
     lv_obj_t * slider = lv_event_get_current_target_obj(e);
diff --git a/examples/event/lv_example_event_1.c b/examples/event/lv_example_event_1.c
index a6162859f..ff5a8eae4 100644
--- a/examples/event/lv_example_event_1.c
+++ b/examples/event/lv_example_event_1.c
@@ -1,6 +1,7 @@
 #include "../lv_examples.h"
 #if LV_BUILD_EXAMPLES && LV_USE_SWITCH
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_cb(lv_event_t * e)
 {
     LV_LOG_USER("Clicked");
diff --git a/examples/event/lv_example_event_2.c b/examples/event/lv_example_event_2.c
index 35d2f757c..3200865b9 100644
--- a/examples/event/lv_example_event_2.c
+++ b/examples/event/lv_example_event_2.c
@@ -1,6 +1,7 @@
 #include "../lv_examples.h"
 #if LV_BUILD_EXAMPLES && LV_USE_SWITCH
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/event/lv_example_event_3.c b/examples/event/lv_example_event_3.c
index 6a8f3cb21..4bbcfe02f 100644
--- a/examples/event/lv_example_event_3.c
+++ b/examples/event/lv_example_event_3.c
@@ -1,6 +1,7 @@
 #include "../lv_examples.h"
 #if LV_BUILD_EXAMPLES && LV_USE_FLEX
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_cb(lv_event_t * e)
 {
     /*The original target of the event. Can be the buttons or the container*/
diff --git a/examples/event/lv_example_event_4.c b/examples/event/lv_example_event_4.c
index 1d38587d7..c0866b3af 100644
--- a/examples/event/lv_example_event_4.c
+++ b/examples/event/lv_example_event_4.c
@@ -5,6 +5,7 @@
 static uint32_t size = 0;
 static bool size_dec = false;
 
+__attribute__(( fptrgroup("lv_timer_cb") ))
 static void timer_cb(lv_timer_t * timer)
 {
     lv_obj_invalidate(lv_timer_get_user_data(timer));
@@ -15,6 +16,7 @@ static void timer_cb(lv_timer_t * timer)
     else if(size == 0) size_dec = false;
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_cb(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_target(e);
diff --git a/examples/get_started/lv_example_get_started_2.c b/examples/get_started/lv_example_get_started_2.c
index 9edac9f03..7f68c417e 100644
--- a/examples/get_started/lv_example_get_started_2.c
+++ b/examples/get_started/lv_example_get_started_2.c
@@ -1,6 +1,7 @@
 #include "../lv_examples.h"
 #if LV_BUILD_EXAMPLES && LV_USE_BUTTON
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void btn_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/get_started/lv_example_get_started_4.c b/examples/get_started/lv_example_get_started_4.c
index e6f3b97e2..faa4fec4d 100644
--- a/examples/get_started/lv_example_get_started_4.c
+++ b/examples/get_started/lv_example_get_started_4.c
@@ -3,6 +3,7 @@
 
 static lv_obj_t * label;
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void slider_event_cb(lv_event_t * e)
 {
     lv_obj_t * slider = lv_event_get_target(e);
diff --git a/examples/layouts/flex/lv_example_flex_5.c b/examples/layouts/flex/lv_example_flex_5.c
index 11d494cb5..519568e57 100644
--- a/examples/layouts/flex/lv_example_flex_5.c
+++ b/examples/layouts/flex/lv_example_flex_5.c
@@ -1,11 +1,13 @@
 #include "../../lv_examples.h"
 #if LV_USE_FLEX && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void row_gap_anim(void * obj, int32_t v)
 {
     lv_obj_set_style_pad_row(obj, v, 0);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void column_gap_anim(void * obj, int32_t v)
 {
     lv_obj_set_style_pad_column(obj, v, 0);
diff --git a/examples/layouts/grid/lv_example_grid_5.c b/examples/layouts/grid/lv_example_grid_5.c
index f5b1a5842..8f2d32d9f 100644
--- a/examples/layouts/grid/lv_example_grid_5.c
+++ b/examples/layouts/grid/lv_example_grid_5.c
@@ -1,11 +1,13 @@
 #include "../../lv_examples.h"
 #if LV_USE_GRID && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void row_gap_anim(void * obj, int32_t v)
 {
     lv_obj_set_style_pad_row(obj, v, 0);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void column_gap_anim(void * obj, int32_t v)
 {
     lv_obj_set_style_pad_column(obj, v, 0);
diff --git a/examples/libs/tiny_ttf/lv_example_tiny_ttf_3.c b/examples/libs/tiny_ttf/lv_example_tiny_ttf_3.c
index af52a09e9..c21a617aa 100644
--- a/examples/libs/tiny_ttf/lv_example_tiny_ttf_3.c
+++ b/examples/libs/tiny_ttf/lv_example_tiny_ttf_3.c
@@ -42,6 +42,7 @@ void lv_example_tiny_ttf_3(void)
     lv_subject_add_observer(&subject_font, font_size_observer_cb, &style);
 }
 
+__attribute__(( fptrgroup("lv_observer_cb") ))
 static void font_size_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
 {
     lv_style_t * style = lv_observer_get_user_data(observer);
diff --git a/examples/others/file_explorer/lv_example_file_explorer_1.c b/examples/others/file_explorer/lv_example_file_explorer_1.c
index 9145cd361..d0f39bbc8 100644
--- a/examples/others/file_explorer/lv_example_file_explorer_1.c
+++ b/examples/others/file_explorer/lv_example_file_explorer_1.c
@@ -6,6 +6,7 @@
 #include <stdlib.h>
 #include <string.h>
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void file_explorer_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/others/file_explorer/lv_example_file_explorer_2.c b/examples/others/file_explorer/lv_example_file_explorer_2.c
index 082635a6d..fec2a7109 100644
--- a/examples/others/file_explorer/lv_example_file_explorer_2.c
+++ b/examples/others/file_explorer/lv_example_file_explorer_2.c
@@ -6,6 +6,7 @@
 #include <stdlib.h>
 #include <string.h>
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void file_explorer_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -19,6 +20,7 @@ static void file_explorer_event_handler(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void btn_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -33,6 +35,7 @@ static void btn_event_handler(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void dd_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/others/file_explorer/lv_example_file_explorer_3.c b/examples/others/file_explorer/lv_example_file_explorer_3.c
index 7dea32c04..e1d19363b 100644
--- a/examples/others/file_explorer/lv_example_file_explorer_3.c
+++ b/examples/others/file_explorer/lv_example_file_explorer_3.c
@@ -42,6 +42,7 @@ static void sort_by_file_kind(lv_obj_t * tb, int16_t lo, int16_t hi)
     sort_by_file_kind(tb, gt + 1, hi);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void file_explorer_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/others/fragment/lv_example_fragment_1.c b/examples/others/fragment/lv_example_fragment_1.c
index cb3470a01..a2376b6e9 100644
--- a/examples/others/fragment/lv_example_fragment_1.c
+++ b/examples/others/fragment/lv_example_fragment_1.c
@@ -37,11 +37,13 @@ void lv_example_fragment_1(void)
     lv_fragment_manager_replace(manager, fragment, &root);
 }
 
+__attribute__(( fptrgroup("lv_fragment_constructor_cb") ))
 static void sample_fragment_ctor(lv_fragment_t * self, void * args)
 {
     ((struct sample_fragment_t *) self)->name = args;
 }
 
+__attribute__(( fptrgroup("lv_fragment_create_obj_cb") ))
 static lv_obj_t * sample_fragment_create_obj(lv_fragment_t * self, lv_obj_t * parent)
 {
     lv_obj_t * label = lv_label_create(parent);
@@ -50,6 +52,7 @@ static lv_obj_t * sample_fragment_create_obj(lv_fragment_t * self, lv_obj_t * pa
     return label;
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void sample_container_delete(lv_event_t * e)
 {
     lv_fragment_manager_t * manager = (lv_fragment_manager_t *) lv_event_get_user_data(e);
diff --git a/examples/others/fragment/lv_example_fragment_2.c b/examples/others/fragment/lv_example_fragment_2.c
index d93c31cb0..3cfc629f8 100644
--- a/examples/others/fragment/lv_example_fragment_2.c
+++ b/examples/others/fragment/lv_example_fragment_2.c
@@ -66,6 +66,7 @@ void lv_example_fragment_2(void)
     lv_obj_add_event_cb(pop_btn, sample_pop_click, LV_EVENT_CLICKED, manager);
 }
 
+__attribute__(( fptrgroup("lv_fragment_constructor_cb") ))
 static void sample_fragment_ctor(lv_fragment_t * self, void * args)
 {
     LV_UNUSED(args);
@@ -73,6 +74,7 @@ static void sample_fragment_ctor(lv_fragment_t * self, void * args)
     ((sample_fragment_t *) self)->counter = 0;
 }
 
+__attribute__(( fptrgroup("lv_fragment_create_obj_cb") ))
 static lv_obj_t * sample_fragment_create_obj(lv_fragment_t * self, lv_obj_t * parent)
 {
     sample_fragment_t * fragment = (sample_fragment_t *) self;
@@ -96,6 +98,7 @@ static lv_obj_t * sample_fragment_create_obj(lv_fragment_t * self, lv_obj_t * pa
     return content;
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void sample_push_click(lv_event_t * e)
 {
     lv_fragment_manager_t * manager = (lv_fragment_manager_t *) lv_event_get_user_data(e);
@@ -104,6 +107,7 @@ static void sample_push_click(lv_event_t * e)
     lv_fragment_manager_push(manager, fragment, &container);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void sample_pop_click(lv_event_t * e)
 {
     lv_fragment_manager_t * manager = (lv_fragment_manager_t *) lv_event_get_user_data(e);
@@ -116,6 +120,7 @@ static void sample_container_delete(lv_event_t * e)
     lv_fragment_manager_delete(manager);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void sample_fragment_inc_click(lv_event_t * e)
 {
     sample_fragment_t * fragment = (sample_fragment_t *) lv_event_get_user_data(e);
diff --git a/examples/others/gridnav/lv_example_gridnav_3.c b/examples/others/gridnav/lv_example_gridnav_3.c
index e8c3dbf07..5c87b81cf 100644
--- a/examples/others/gridnav/lv_example_gridnav_3.c
+++ b/examples/others/gridnav/lv_example_gridnav_3.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_GRIDNAV && LV_USE_FLEX && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void cont_sub_event_cb(lv_event_t * e)
 {
     uint32_t k = lv_event_get_key(e);
diff --git a/examples/others/gridnav/lv_example_gridnav_4.c b/examples/others/gridnav/lv_example_gridnav_4.c
index 069ba66b7..a173653e9 100644
--- a/examples/others/gridnav/lv_example_gridnav_4.c
+++ b/examples/others/gridnav/lv_example_gridnav_4.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_GRIDNAV && LV_USE_FLEX && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_target(e);
diff --git a/examples/others/gridnav/lv_example_gridnav_5.c b/examples/others/gridnav/lv_example_gridnav_5.c
index 217daad41..b9a3c7dea 100644
--- a/examples/others/gridnav/lv_example_gridnav_5.c
+++ b/examples/others/gridnav/lv_example_gridnav_5.c
@@ -7,11 +7,13 @@ static const int32_t opts_counts[] = {6, 10, 3};
 static lv_obj_t * sliders[3];
 static lv_obj_t * rollers[3];
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void slider_key_cb(lv_event_t * e)
 {
     uint8_t i = (uint32_t)(uintptr_t)lv_event_get_user_data(e);
     lv_roller_set_selected(rollers[i], lv_slider_get_value(sliders[i]), LV_ANIM_ON);
 }
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void roller_key_cb(lv_event_t * e)
 {
     uint8_t i = (uint32_t)(uintptr_t)lv_event_get_user_data(e);
diff --git a/examples/others/ime/lv_example_ime_pinyin_1.c b/examples/others/ime/lv_example_ime_pinyin_1.c
index c706ab599..ca53de08b 100644
--- a/examples/others/ime/lv_example_ime_pinyin_1.c
+++ b/examples/others/ime/lv_example_ime_pinyin_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_LABEL && LV_USE_TEXTAREA && LV_FONT_SIMSUN_16_CJK && LV_USE_IME_PINYIN && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void ta_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/others/ime/lv_example_ime_pinyin_2.c b/examples/others/ime/lv_example_ime_pinyin_2.c
index 1227bfe55..be76889ca 100644
--- a/examples/others/ime/lv_example_ime_pinyin_2.c
+++ b/examples/others/ime/lv_example_ime_pinyin_2.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_LABEL && LV_USE_TEXTAREA && LV_FONT_SIMSUN_16_CJK && LV_USE_IME_PINYIN && LV_IME_PINYIN_USE_K9_MODE && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void ta_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/others/observer/lv_example_observer_2.c b/examples/others/observer/lv_example_observer_2.c
index fdd23f0f8..54188d7c9 100644
--- a/examples/others/observer/lv_example_observer_2.c
+++ b/examples/others/observer/lv_example_observer_2.c
@@ -25,6 +25,7 @@ void lv_example_observer_2(void)
  * It doesn't know anything about the internals of the UI
  * and uses any the `engine_subject` as an interface.
  * -------------------------------------------------*/
+__attribute__(( fptrgroup("lv_observer_cb") ))
 static void engine_state_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
 {
     LV_UNUSED(observer);
@@ -56,6 +57,7 @@ typedef enum {
 
 static lv_subject_t auth_state_subject;
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void textarea_event_cb(lv_event_t * e)
 {
     lv_obj_t * ta = lv_event_get_target(e);
@@ -67,6 +69,7 @@ static void textarea_event_cb(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_observer_cb") ))
 static void info_label_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
 {
     lv_obj_t * label = lv_observer_get_target(observer);
@@ -83,6 +86,7 @@ static void info_label_observer_cb(lv_observer_t * observer, lv_subject_t * subj
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void log_out_click_event_cb(lv_event_t * e)
 {
     LV_UNUSED(e);
diff --git a/examples/others/observer/lv_example_observer_3.c b/examples/others/observer/lv_example_observer_3.c
index 029bbf3e3..a3108d443 100644
--- a/examples/others/observer/lv_example_observer_3.c
+++ b/examples/others/observer/lv_example_observer_3.c
@@ -66,6 +66,7 @@ void lv_example_observer_3(void)
     lv_subject_set_int(&am_pm_subject, TIME_PM);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void set_btn_clicked_event_cb(lv_event_t * e)
 {
     lv_obj_t * set_btn = lv_event_get_target(e);
@@ -108,6 +109,7 @@ static void set_btn_clicked_event_cb(lv_event_t * e)
     lv_label_set_text(close_label, LV_SYMBOL_CLOSE);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void close_clicked_event_cb(lv_event_t * e)
 {
     lv_obj_t * set_btn = lv_event_get_user_data(e);
@@ -118,6 +120,7 @@ static void close_clicked_event_cb(lv_event_t * e)
 }
 
 /*Watch all related subject to display the current time correctly*/
+__attribute__(( fptrgroup("lv_observer_cb") ))
 static void time_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
 {
     int32_t hour = lv_subject_get_int(lv_subject_get_group_element(subject, 0));
diff --git a/examples/others/observer/lv_example_observer_4.c b/examples/others/observer/lv_example_observer_4.c
index 934a3f5b0..1c55bfa79 100644
--- a/examples/others/observer/lv_example_observer_4.c
+++ b/examples/others/observer/lv_example_observer_4.c
@@ -64,16 +64,19 @@ void lv_example_observer_4(void)
     lv_subject_notify(&current_tab_subject);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static int32_t anim_get_x_cb(lv_anim_t * a)
 {
     return lv_obj_get_x_aligned(a->var);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void anim_set_x_cb(void * obj, int32_t v)
 {
     lv_obj_set_x(obj, v);
 }
 
+__attribute__(( fptrgroup("lv_observer_cb") ))
 static void cont_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
 {
     int32_t prev_v = lv_subject_get_previous_int(subject);
@@ -163,6 +166,7 @@ static void btn_create(lv_obj_t * parent, const char * text)
     lv_obj_center(label);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void btn_click_event_cb(lv_event_t * e)
 {
     lv_obj_t * btn = lv_event_get_target(e);
@@ -170,6 +174,7 @@ static void btn_click_event_cb(lv_event_t * e)
     lv_subject_set_int(&current_tab_subject, idx);
 }
 
+__attribute__(( fptrgroup("lv_observer_cb") ))
 static void btn_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
 {
     int32_t prev_v = lv_subject_get_previous_int(subject);
@@ -182,6 +187,7 @@ static void btn_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
     if(idx == cur_v) lv_obj_add_state(btn, LV_STATE_CHECKED);
 }
 
+__attribute__(( fptrgroup("lv_observer_cb") ))
 static void indicator_observer_cb(lv_observer_t * observer, lv_subject_t * subject)
 {
     int32_t cur_v = lv_subject_get_int(subject);
diff --git a/examples/widgets/button/lv_example_button_1.c b/examples/widgets/button/lv_example_button_1.c
index eae9c9dab..6d47b052f 100644
--- a/examples/widgets/button/lv_example_button_1.c
+++ b/examples/widgets/button/lv_example_button_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_BUTTON && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/buttonmatrix/lv_example_buttonmatrix_1.c b/examples/widgets/buttonmatrix/lv_example_buttonmatrix_1.c
index baa2057cd..19314c6e0 100644
--- a/examples/widgets/buttonmatrix/lv_example_buttonmatrix_1.c
+++ b/examples/widgets/buttonmatrix/lv_example_buttonmatrix_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_BUTTONMATRIX && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/calendar/lv_example_calendar_1.c b/examples/widgets/calendar/lv_example_calendar_1.c
index 9fe71447e..29fd09869 100644
--- a/examples/widgets/calendar/lv_example_calendar_1.c
+++ b/examples/widgets/calendar/lv_example_calendar_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_CALENDAR && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/checkbox/lv_example_checkbox_1.c b/examples/widgets/checkbox/lv_example_checkbox_1.c
index 9fe71f94b..9910ed950 100644
--- a/examples/widgets/checkbox/lv_example_checkbox_1.c
+++ b/examples/widgets/checkbox/lv_example_checkbox_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_CHECKBOX && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/dropdown/lv_example_dropdown_1.c b/examples/widgets/dropdown/lv_example_dropdown_1.c
index 856c97dbd..a5a3d3a2f 100644
--- a/examples/widgets/dropdown/lv_example_dropdown_1.c
+++ b/examples/widgets/dropdown/lv_example_dropdown_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_DROPDOWN && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/keyboard/lv_example_keyboard_1.c b/examples/widgets/keyboard/lv_example_keyboard_1.c
index ba4bc0727..263e94e28 100644
--- a/examples/widgets/keyboard/lv_example_keyboard_1.c
+++ b/examples/widgets/keyboard/lv_example_keyboard_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_KEYBOARD && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void ta_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/list/lv_example_list_1.c b/examples/widgets/list/lv_example_list_1.c
index 7ee7eb5f6..c398e4864 100644
--- a/examples/widgets/list/lv_example_list_1.c
+++ b/examples/widgets/list/lv_example_list_1.c
@@ -2,6 +2,7 @@
 #if LV_USE_LIST && LV_BUILD_EXAMPLES
 static lv_obj_t * list1;
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/list/lv_example_list_2.c b/examples/widgets/list/lv_example_list_2.c
index c50201312..1350b6977 100644
--- a/examples/widgets/list/lv_example_list_2.c
+++ b/examples/widgets/list/lv_example_list_2.c
@@ -6,6 +6,7 @@ static lv_obj_t * list2;
 
 static lv_obj_t * currentButton = NULL;
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/msgbox/lv_example_msgbox_2.c b/examples/widgets/msgbox/lv_example_msgbox_2.c
index 793a9c4df..e5332461a 100644
--- a/examples/widgets/msgbox/lv_example_msgbox_2.c
+++ b/examples/widgets/msgbox/lv_example_msgbox_2.c
@@ -13,7 +13,7 @@ void lv_example_msgbox_2(void)
     lv_obj_set_style_clip_corner(setting, true, 0);
 
     /* setting fixed size */
-    lv_obj_set_size(setting, 300, 200);
+    lv_obj_set_size(setting, 200, 200);
 
     /* setting's titlebar/header */
     lv_msgbox_add_title(setting, "Setting");
diff --git a/examples/widgets/roller/lv_example_roller_1.c b/examples/widgets/roller/lv_example_roller_1.c
index 7a9d8407d..7056e4823 100644
--- a/examples/widgets/roller/lv_example_roller_1.c
+++ b/examples/widgets/roller/lv_example_roller_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_ROLLER && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/roller/lv_example_roller_2.c b/examples/widgets/roller/lv_example_roller_2.c
index a4b02378b..d11097a2e 100644
--- a/examples/widgets/roller/lv_example_roller_2.c
+++ b/examples/widgets/roller/lv_example_roller_2.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_ROLLER && LV_FONT_MONTSERRAT_22 && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/switch/lv_example_switch_1.c b/examples/widgets/switch/lv_example_switch_1.c
index 7b6a53138..f9eb16ec1 100644
--- a/examples/widgets/switch/lv_example_switch_1.c
+++ b/examples/widgets/switch/lv_example_switch_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_SWITCH && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/textarea/lv_example_textarea_2.c b/examples/widgets/textarea/lv_example_textarea_2.c
index b1d7cbc8c..f19371556 100644
--- a/examples/widgets/textarea/lv_example_textarea_2.c
+++ b/examples/widgets/textarea/lv_example_textarea_2.c
@@ -49,6 +49,7 @@ void lv_example_textarea_2(void)
 
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void ta_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/examples/widgets/textarea/lv_example_textarea_3.c b/examples/widgets/textarea/lv_example_textarea_3.c
index 6fccb3f92..2e2f3dc3e 100644
--- a/examples/widgets/textarea/lv_example_textarea_3.c
+++ b/examples/widgets/textarea/lv_example_textarea_3.c
@@ -26,6 +26,7 @@ void lv_example_textarea_3(void)
     lv_keyboard_set_textarea(kb, ta);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void ta_event_cb(lv_event_t * e)
 {
     lv_obj_t * ta = lv_event_get_target(e);
diff --git a/examples/widgets/win/lv_example_win_1.c b/examples/widgets/win/lv_example_win_1.c
index 67411a958..912147f9a 100644
--- a/examples/widgets/win/lv_example_win_1.c
+++ b/examples/widgets/win/lv_example_win_1.c
@@ -1,6 +1,7 @@
 #include "../../lv_examples.h"
 #if LV_USE_WIN && LV_BUILD_EXAMPLES
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_target(e);
diff --git a/src/core/lv_group.c b/src/core/lv_group.c
index d1cdb3176..0a422756c 100644
--- a/src/core/lv_group.c
+++ b/src/core/lv_group.c
@@ -428,8 +428,9 @@ static void lv_group_refocus(lv_group_t * g)
     g->wrap = temp_wrap;
 }
 
-static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
-                            void * (*move)(const lv_ll_t *, const void *))
+static bool focus_next_core(lv_group_t * group,
+    __attribute__(( fptrgroup("lv_ll_get") )) void * (*begin)(const lv_ll_t *),
+    __attribute__(( fptrgroup("lv_ll_get") )) void * (*move)(const lv_ll_t *, const void *))
 {
     bool focus_changed = false;
     if(group->frozen) return focus_changed;
diff --git a/src/core/lv_group_private.h b/src/core/lv_group_private.h
index 33b7640c7..fbbbcb806 100644
--- a/src/core/lv_group_private.h
+++ b/src/core/lv_group_private.h
@@ -32,7 +32,9 @@ struct lv_group_t {
     lv_ll_t obj_ll;        /**< Linked list to store the objects in the group*/
     lv_obj_t ** obj_focus; /**< The object in focus*/
 
+    __attribute__(( fptrgroup("lv_focus_cb") ))
     lv_group_focus_cb_t focus_cb;              /**< A function to call when a new object is focused (optional)*/
+    __attribute__(( fptrgroup("lv_edge_cb") ))
     lv_group_edge_cb_t  edge_cb;               /**< A function to call when an edge is reached, no more focus
                                                     targets are available in this direction (to allow edge feedback
                                                     like a sound or a scroll bounce) */
diff --git a/src/core/lv_obj.c b/src/core/lv_obj.c
index c58e95502..029a2d5e1 100644
--- a/src/core/lv_obj.c
+++ b/src/core/lv_obj.c
@@ -988,6 +988,7 @@ static bool obj_valid_child(const lv_obj_t * parent, const lv_obj_t * obj_to_fin
     return false;
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void null_on_delete_cb(lv_event_t * e)
 {
     lv_obj_t ** obj_ptr = lv_event_get_user_data(e);
diff --git a/src/core/lv_obj_class.c b/src/core/lv_obj_class.c
index cb5a396b0..ec241552e 100644
--- a/src/core/lv_obj_class.c
+++ b/src/core/lv_obj_class.c
@@ -133,6 +133,7 @@ void lv_obj_class_init_obj(lv_obj_t * obj)
     }
 }
 
+#pragma stackfunction 1024
 void lv_obj_destruct(lv_obj_t * obj)
 {
     if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
@@ -173,7 +174,7 @@ bool lv_obj_is_group_def(lv_obj_t * obj)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+#pragma stackfunction 1024
 static void lv_obj_construct(const lv_obj_class_t * class_p, lv_obj_t * obj)
 {
     if(obj->class_p->base_class) {
diff --git a/src/core/lv_obj_class_private.h b/src/core/lv_obj_class_private.h
index 1279b9caf..53bf0f519 100644
--- a/src/core/lv_obj_class_private.h
+++ b/src/core/lv_obj_class_private.h
@@ -31,10 +31,13 @@ extern "C" {
 struct lv_obj_class_t {
     const lv_obj_class_t * base_class;
     /** class_p is the final class while obj->class_p is the class currently being [de]constructed. */
+    __attribute__(( fptrgroup("lv_obj_constructor_cb") ))
     void (*constructor_cb)(const lv_obj_class_t * class_p, lv_obj_t * obj);
+    __attribute__(( fptrgroup("lv_obj_destructor_cb") ))
     void (*destructor_cb)(const lv_obj_class_t * class_p, lv_obj_t * obj);
 
     /** class_p is the class in which event is being processed. */
+    __attribute__(( fptrgroup("lv_event_cb") ))
     void (*event_cb)(const lv_obj_class_t * class_p, lv_event_t * e);  /**< Widget type specific event function*/
 
 #if LV_USE_OBJ_PROPERTY
diff --git a/src/core/lv_obj_event.c b/src/core/lv_obj_event.c
index 3831feeb5..542e8af96 100644
--- a/src/core/lv_obj_event.c
+++ b/src/core/lv_obj_event.c
@@ -44,7 +44,6 @@ static bool event_is_bubbled(lv_event_t * e);
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
 lv_result_t lv_obj_send_event(lv_obj_t * obj, lv_event_code_t event_code, void * param)
 {
     if(obj == NULL) return LV_RESULT_OK;
@@ -342,7 +341,7 @@ lv_draw_task_t * lv_event_get_draw_task(lv_event_t * e)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+ #pragma stackfunction 1024
 static lv_result_t event_send_core(lv_event_t * e)
 {
     LV_TRACE_EVENT("Sending event %d to %p with %p param", e->code, (void *)e->original_target, e->param);
diff --git a/src/core/lv_obj_pos.c b/src/core/lv_obj_pos.c
index 0f10d7dcc..fe40e3106 100644
--- a/src/core/lv_obj_pos.c
+++ b/src/core/lv_obj_pos.c
@@ -54,6 +54,7 @@ void lv_obj_set_pos(lv_obj_t * obj, int32_t x, int32_t y)
     lv_obj_set_y(obj, y);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 void lv_obj_set_x(lv_obj_t * obj, int32_t x)
 {
     LV_ASSERT_OBJ(obj, MY_CLASS);
@@ -68,6 +69,7 @@ void lv_obj_set_x(lv_obj_t * obj, int32_t x)
     }
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 void lv_obj_set_y(lv_obj_t * obj, int32_t y)
 {
     LV_ASSERT_OBJ(obj, MY_CLASS);
@@ -753,6 +755,7 @@ void lv_obj_move_to(lv_obj_t * obj, int32_t x, int32_t y)
     }
 }
 
+#pragma stackfunction 2048
 void lv_obj_move_children_by(lv_obj_t * obj, int32_t x_diff, int32_t y_diff, bool ignore_floating)
 {
     uint32_t i;
@@ -774,6 +777,7 @@ void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, lv_obj_point_t
     lv_obj_transform_point_array(obj, p, 1, flags);
 }
 
+#pragma stackfunction 1024
 void lv_obj_transform_point_array(const lv_obj_t * obj, lv_point_t points[], size_t count,
                                   lv_obj_point_transform_flag_t flags)
 {
@@ -1123,6 +1127,7 @@ static int32_t calc_content_height(lv_obj_t * obj)
     return LV_MAX(self_h, child_res + space_bottom);
 }
 
+#pragma stackfunction 2048
 static void layout_update_core(lv_obj_t * obj)
 {
     uint32_t i;
diff --git a/src/core/lv_obj_property.c b/src/core/lv_obj_property.c
index 405b00674..7f02b1d9a 100644
--- a/src/core/lv_obj_property.c
+++ b/src/core/lv_obj_property.c
@@ -293,6 +293,7 @@ static lv_result_t obj_property(lv_obj_t * obj, lv_prop_id_t id, lv_property_t *
     return LV_RESULT_INVALID;
 }
 
+__attribute__(( fptrgroup("lv_utils_cmp") ))
 static int property_name_compare(const void * ref, const void * element)
 {
     const lv_property_name_t * prop = element;
diff --git a/src/core/lv_obj_scroll.c b/src/core/lv_obj_scroll.c
index fa5e16fc9..d6b5ca59a 100644
--- a/src/core/lv_obj_scroll.c
+++ b/src/core/lv_obj_scroll.c
@@ -668,17 +668,19 @@ void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void scroll_x_anim(void * obj, int32_t v)
 {
     lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void scroll_y_anim(void * obj, int32_t v)
 {
     lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 }
 
+__attribute__(( fptrgroup("lv_anim_deleted_cb") ))
 static void scroll_end_cb(lv_anim_t * a)
 {
     /*Do not sent END event if there wasn't a BEGIN*/
diff --git a/src/core/lv_obj_style.c b/src/core/lv_obj_style.c
index 06e3ffec3..32790dadb 100644
--- a/src/core/lv_obj_style.c
+++ b/src/core/lv_obj_style.c
@@ -753,6 +753,7 @@ static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_style_selector_t se
  * @param style refresh objects only with this
  * @param obj pointer to an object
  */
+#pragma stackfunction 1024
 static void report_style_change_core(void * style, lv_obj_t * obj)
 {
     uint32_t i;
@@ -775,6 +776,7 @@ static void report_style_change_core(void * style, lv_obj_t * obj)
  * because the NULL styles are inherited from the parent
  * @param obj pointer to an object
  */
+#pragma stackfunction 1024
 static void refresh_children_style(lv_obj_t * obj)
 {
     uint32_t i;
@@ -832,6 +834,7 @@ static bool trans_delete(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, t
     return removed;
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void trans_anim_cb(void * _tr, int32_t v)
 {
     trans_t * tr = _tr;
@@ -896,6 +899,7 @@ static void trans_anim_cb(void * _tr, int32_t v)
 
 }
 
+__attribute__(( fptrgroup("lv_anim_start_cb") ))
 static void trans_anim_start_cb(lv_anim_t * a)
 {
     trans_t * tr = a->var;
@@ -919,6 +923,7 @@ static void trans_anim_start_cb(lv_anim_t * a)
 
 }
 
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 static void trans_anim_completed_cb(lv_anim_t * a)
 {
     trans_t * tr = a->var;
@@ -1020,11 +1025,13 @@ static void full_cache_refresh(lv_obj_t * obj, lv_part_t part)
 #endif
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void fade_anim_cb(void * obj, int32_t v)
 {
     lv_obj_set_style_opa(obj, v, 0);
 }
 
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 static void fade_in_anim_completed(lv_anim_t * a)
 {
     lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
diff --git a/src/core/lv_obj_style_private.h b/src/core/lv_obj_style_private.h
index 7fafc58b1..896cf2d53 100644
--- a/src/core/lv_obj_style_private.h
+++ b/src/core/lv_obj_style_private.h
@@ -36,6 +36,7 @@ struct lv_obj_style_transition_dsc_t {
     uint16_t delay;
     lv_style_selector_t selector;
     lv_style_prop_t prop;
+    __attribute__(( fptrgroup("lv_anim_path_cb") ))
     lv_anim_path_cb_t path_cb;
     void * user_data;
 };
diff --git a/src/core/lv_obj_tree.c b/src/core/lv_obj_tree.c
index 15c069e90..e7ea990c6 100644
--- a/src/core/lv_obj_tree.c
+++ b/src/core/lv_obj_tree.c
@@ -129,6 +129,7 @@ void lv_obj_delete_delayed(lv_obj_t * obj, uint32_t delay_ms)
     lv_anim_start(&a);
 }
 
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 void lv_obj_delete_anim_completed_cb(lv_anim_t * a)
 {
     lv_obj_delete(a->var);
@@ -479,7 +480,7 @@ void lv_obj_dump_tree(lv_obj_t * start_obj)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_async_info_cb") ))
 static void lv_obj_delete_async_cb(void * obj)
 {
     LV_ASSERT_OBJ(obj, MY_CLASS);
@@ -501,6 +502,7 @@ static void obj_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
     lv_indev_reset(indev, obj);
 }
 
+#pragma stackfunction 1024
 static void obj_delete_core(lv_obj_t * obj)
 {
     if(obj->is_deleting)
@@ -590,6 +592,7 @@ static void obj_delete_core(lv_obj_t * obj)
     lv_free(obj);
 }
 
+#pragma stackfunction 1024
 static lv_obj_tree_walk_res_t walk_core(lv_obj_t * obj, lv_obj_tree_walk_cb_t cb, void * user_data)
 {
     lv_obj_tree_walk_res_t res = LV_OBJ_TREE_WALK_NEXT;
diff --git a/src/display/lv_display.c b/src/display/lv_display.c
index df4bb9b27..51d57a18a 100644
--- a/src/display/lv_display.c
+++ b/src/display/lv_display.c
@@ -155,6 +155,8 @@ lv_display_t * lv_display_create(int32_t hor_res, int32_t ver_res)
     return disp;
 }
 
+#pragma stackfunction 8192
+__attribute__(( fptrgroup("lv_ll_cleanup") ))
 void lv_display_delete(lv_display_t * disp)
 {
     bool was_default = false;
@@ -777,6 +779,7 @@ uint32_t lv_display_remove_event_cb_with_user_data(lv_display_t * disp, lv_event
     return removed_count;
 }
 
+#pragma stackfunction 1024
 lv_result_t lv_display_send_event(lv_display_t * disp, lv_event_code_t code, void * param)
 {
 
@@ -1070,6 +1073,7 @@ static void scr_load_internal(lv_obj_t * scr)
     lv_obj_invalidate(scr);
 }
 
+__attribute__(( fptrgroup("lv_anim_start_cb") ))
 static void scr_load_anim_start(lv_anim_t * a)
 {
     lv_display_t * d = lv_obj_get_display(a->var);
@@ -1080,21 +1084,25 @@ static void scr_load_anim_start(lv_anim_t * a)
     lv_obj_send_event(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void opa_scale_anim(void * obj, int32_t v)
 {
     lv_obj_set_style_opa(obj, v, 0);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void set_x_anim(void * obj, int32_t v)
 {
     lv_obj_set_x(obj, v);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void set_y_anim(void * obj, int32_t v)
 {
     lv_obj_set_y(obj, v);
 }
 
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 static void scr_anim_completed(lv_anim_t * a)
 {
     lv_display_t * d = lv_obj_get_display(a->var);
@@ -1119,6 +1127,7 @@ static bool is_out_anim(lv_screen_load_anim_t anim_type)
            anim_type == LV_SCR_LOAD_ANIM_OUT_BOTTOM;
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void disp_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/src/display/lv_display_private.h b/src/display/lv_display_private.h
index 7dc9f189f..27c7a33c8 100644
--- a/src/display/lv_display_private.h
+++ b/src/display/lv_display_private.h
@@ -71,12 +71,14 @@ struct lv_display_t {
 
     /** MANDATORY: Write the internal buffer (draw_buf) to the display. 'lv_display_flush_ready()' has to be
      * called when finished*/
+    __attribute__(( fptrgroup("lv_display_flush_cb") ))
     lv_display_flush_cb_t flush_cb;
 
     /**
      * Used to wait while flushing is ready.
      * It can do any complex logic to wait, including semaphores, mutexes, polling flags, etc.
      * If not set `flushing` flag is used which can be cleared with `lv_display_flush_ready()` */
+    __attribute__(( fptrgroup("lv_display_flush_wait_cb") ))
     lv_display_flush_wait_cb_t flush_wait_cb;
 
     /** 1: flushing is in progress. (It can't be a bit field because when it's cleared from IRQ
@@ -112,7 +114,9 @@ struct lv_display_t {
      * Layer
      *--------------------*/
     lv_layer_t * layer_head;
+    __attribute__(( fptrgroup("lv_display_layer_init") ))
     void (*layer_init)(lv_display_t * disp, lv_layer_t * layer);
+    __attribute__(( fptrgroup("lv_display_layer_deinit") ))
     void (*layer_deinit)(lv_display_t * disp, lv_layer_t * layer);
 
     /*---------------------
diff --git a/src/draw/lv_draw_buf.c b/src/draw/lv_draw_buf.c
index a6dc29bb1..858396563 100644
--- a/src/draw/lv_draw_buf.c
+++ b/src/draw/lv_draw_buf.c
@@ -593,7 +593,7 @@ void lv_image_buf_free(lv_image_dsc_t * dsc)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_draw_buf_malloc_cb") ))
 static void * buf_malloc(size_t size_bytes, lv_color_format_t color_format)
 {
     LV_UNUSED(color_format);
@@ -603,11 +603,13 @@ static void * buf_malloc(size_t size_bytes, lv_color_format_t color_format)
     return lv_malloc(size_bytes);
 }
 
+__attribute__(( fptrgroup("lv_draw_buf_free_cb") ))
 static void buf_free(void * buf)
 {
     lv_free(buf);
 }
 
+__attribute__(( fptrgroup("lv_draw_align_pointer_cb") ))
 static void * buf_align(void * buf, lv_color_format_t color_format)
 {
     LV_UNUSED(color_format);
@@ -619,6 +621,7 @@ static void * buf_align(void * buf, lv_color_format_t color_format)
     return buf_u8;
 }
 
+__attribute__(( fptrgroup("lv_draw_width_to_stride_cb") ))
 static uint32_t width_to_stride(uint32_t w, lv_color_format_t color_format)
 {
     uint32_t width_byte;
diff --git a/src/draw/lv_draw_buf_private.h b/src/draw/lv_draw_buf_private.h
index 051f9ba7c..0a5d88c8d 100644
--- a/src/draw/lv_draw_buf_private.h
+++ b/src/draw/lv_draw_buf_private.h
@@ -25,11 +25,17 @@ extern "C" {
  **********************/
 
 struct lv_draw_buf_handlers_t {
+    __attribute__(( fptrgroup("lv_draw_buf_malloc_cb") ))
     lv_draw_buf_malloc_cb buf_malloc_cb;
+    __attribute__(( fptrgroup("lv_draw_buf_free_cb") ))
     lv_draw_buf_free_cb buf_free_cb;
+    __attribute__(( fptrgroup("lv_draw_align_pointer_cb") ))
     lv_draw_buf_align_cb align_pointer_cb;
+    __attribute__(( fptrgroup("lv_draw_invalidate_cache_cb") ))
     lv_draw_buf_cache_operation_cb invalidate_cache_cb;
+    __attribute__(( fptrgroup("lv_draw_flush_cache_cb") ))
     lv_draw_buf_cache_operation_cb flush_cache_cb;
+    __attribute__(( fptrgroup("lv_draw_width_to_stride_cb") ))
     lv_draw_buf_width_to_stride_cb width_to_stride_cb;
 };
 
diff --git a/src/draw/lv_image_decoder_private.h b/src/draw/lv_image_decoder_private.h
index 27ef26140..0b76addf4 100644
--- a/src/draw/lv_image_decoder_private.h
+++ b/src/draw/lv_image_decoder_private.h
@@ -42,9 +42,13 @@ struct lv_image_decoder_args_t {
 };
 
 struct lv_image_decoder_t {
+    __attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
     lv_image_decoder_info_f_t info_cb;
+    __attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
     lv_image_decoder_open_f_t open_cb;
+    __attribute__(( fptrgroup("lv_image_deocder_get_area_cb") ))
     lv_image_decoder_get_area_cb_t get_area_cb;
+    __attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
     lv_image_decoder_close_f_t close_cb;
 
     const char * name;
diff --git a/src/draw/sdl/lv_draw_sdl.c b/src/draw/sdl/lv_draw_sdl.c
index c155ac114..4137c3255 100644
--- a/src/draw/sdl/lv_draw_sdl.c
+++ b/src/draw/sdl/lv_draw_sdl.c
@@ -59,11 +59,13 @@ static SDL_Texture * layer_get_texture(lv_layer_t * layer);
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool sdl_texture_cache_create_cb(cache_data_t * cached_data, void * user_data)
 {
     return draw_to_texture((lv_draw_sdl_unit_t *)user_data, cached_data);
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void sdl_texture_cache_free_cb(cache_data_t * cached_data, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -74,6 +76,7 @@ static void sdl_texture_cache_free_cb(cache_data_t * cached_data, void * user_da
     cached_data->texture = NULL;
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t sdl_texture_cache_compare_cb(const cache_data_t * lhs, const cache_data_t * rhs)
 {
     if(lhs == rhs) return 0;
diff --git a/src/draw/sw/lv_draw_sw_mask.c b/src/draw/sw/lv_draw_sw_mask.c
index c4fd79220..3c12d1f5a 100644
--- a/src/draw/sw/lv_draw_sw_mask.c
+++ b/src/draw/sw/lv_draw_sw_mask.c
@@ -378,7 +378,7 @@ void lv_draw_sw_mask_map_init(lv_draw_sw_mask_map_param_t * param, const lv_area
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_draw_sw_mask_cb") ))
 static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_line(lv_opa_t * mask_buf, int32_t abs_x,
                                                                      int32_t abs_y, int32_t len,
                                                                      lv_draw_sw_mask_line_param_t * p)
@@ -699,6 +699,7 @@ static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM line_mask_steep(lv_opa_t * ma
     return LV_DRAW_SW_MASK_RES_CHANGED;
 }
 
+__attribute__(( fptrgroup("lv_draw_sw_mask_cb") ))
 static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_angle(lv_opa_t * mask_buf, int32_t abs_x,
                                                                       int32_t abs_y, int32_t len,
                                                                       lv_draw_sw_mask_angle_param_t * p)
@@ -837,6 +838,7 @@ static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_angle(lv_opa_t *
     }
 }
 
+__attribute__(( fptrgroup("lv_draw_sw_mask_cb") ))
 static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_radius(lv_opa_t * mask_buf, int32_t abs_x,
                                                                        int32_t abs_y, int32_t len,
                                                                        lv_draw_sw_mask_radius_param_t * p)
@@ -947,6 +949,7 @@ static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_radius(lv_opa_t
     return LV_DRAW_SW_MASK_RES_CHANGED;
 }
 
+__attribute__(( fptrgroup("lv_draw_sw_mask_cb") ))
 static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_fade(lv_opa_t * mask_buf, int32_t abs_x,
                                                                      int32_t abs_y, int32_t len,
                                                                      lv_draw_sw_mask_fade_param_t * p)
@@ -993,6 +996,7 @@ static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_fade(lv_opa_t *
     }
 }
 
+__attribute__(( fptrgroup("lv_draw_sw_mask_cb") ))
 static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_map(lv_opa_t * mask_buf, int32_t abs_x,
                                                                     int32_t abs_y, int32_t len,
                                                                     lv_draw_sw_mask_map_param_t * p)
diff --git a/src/draw/sw/lv_draw_sw_mask_private.h b/src/draw/sw/lv_draw_sw_mask_private.h
index aeae9b8ea..448c37c2a 100644
--- a/src/draw/sw/lv_draw_sw_mask_private.h
+++ b/src/draw/sw/lv_draw_sw_mask_private.h
@@ -37,6 +37,7 @@ typedef struct  {
 } lv_draw_sw_mask_radius_circle_dsc_t;
 
 struct lv_draw_sw_mask_common_dsc_t {
+    __attribute__(( fptrgroup("lv_draw_sw_mask_cb") ))
     lv_draw_sw_mask_xcb_t cb;
     lv_draw_sw_mask_type_t type;
 };
diff --git a/src/draw/vg_lite/lv_vg_lite_decoder.c b/src/draw/vg_lite/lv_vg_lite_decoder.c
index bb7a784bb..d9b8c012e 100644
--- a/src/draw/vg_lite/lv_vg_lite_decoder.c
+++ b/src/draw/vg_lite/lv_vg_lite_decoder.c
@@ -150,6 +150,7 @@ static void image_decode_to_index8_line(uint8_t * dest, const uint8_t * src, int
     }
 }
 
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     lv_result_t res = lv_bin_decoder_info(decoder, dsc, header);
@@ -343,6 +344,7 @@ failed:
  * @param dsc     pointer to the decoder descriptor
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     lv_result_t res = LV_RESULT_INVALID;
@@ -383,6 +385,7 @@ static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_d
     return res;
 }
 
+__attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
 static void decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder); /*Unused*/
diff --git a/src/draw/vg_lite/lv_vg_lite_grad.c b/src/draw/vg_lite/lv_vg_lite_grad.c
index 5158d057d..9c8c3dc70 100644
--- a/src/draw/vg_lite/lv_vg_lite_grad.c
+++ b/src/draw/vg_lite/lv_vg_lite_grad.c
@@ -571,6 +571,7 @@ static vg_lite_gradient_spreadmode_t lv_spread_to_vg(lv_vector_gradient_spread_t
     return VG_LITE_GRADIENT_SPREAD_FILL;
 }
 
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool grad_create_cb(grad_item_t * item, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -593,6 +594,7 @@ static bool grad_create_cb(grad_item_t * item, void * user_data)
     return false;
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void grad_free_cb(grad_item_t * item, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -615,6 +617,7 @@ static void grad_free_cb(grad_item_t * item, void * user_data)
     }
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t grad_compare_cb(const grad_item_t * lhs, const grad_item_t * rhs)
 {
     /* compare type first */
diff --git a/src/draw/vg_lite/lv_vg_lite_stroke.c b/src/draw/vg_lite/lv_vg_lite_stroke.c
index 1b8a20248..99c7b0326 100644
--- a/src/draw/vg_lite/lv_vg_lite_stroke.c
+++ b/src/draw/vg_lite/lv_vg_lite_stroke.c
@@ -167,7 +167,7 @@ void lv_vg_lite_stroke_drop(struct lv_draw_vg_lite_unit_t * unit,
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool stroke_create_cb(stroke_item_t * item, void * user_data)
 {
     LV_ASSERT_NULL(item);
@@ -235,6 +235,7 @@ static bool stroke_create_cb(stroke_item_t * item, void * user_data)
     return true;
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void stroke_free_cb(stroke_item_t * item, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -265,6 +266,7 @@ static lv_cache_compare_res_t path_compare(const vg_lite_path_t * lhs, const vg_
     return 0;
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t stroke_compare_cb(const stroke_item_t * lhs, const stroke_item_t * rhs)
 {
     if(lhs->width != lhs->width) {
diff --git a/src/drivers/display/drm/lv_linux_drm.c b/src/drivers/display/drm/lv_linux_drm.c
index 29e0168d9..06925012f 100644
--- a/src/drivers/display/drm/lv_linux_drm.c
+++ b/src/drivers/display/drm/lv_linux_drm.c
@@ -797,6 +797,7 @@ static int drm_setup_buffers(drm_dev_t * drm_dev)
     return 0;
 }
 
+__attribute__(( fptrgroup("lv_display_flush_wait_cb") ))
 static void drm_flush_wait(lv_display_t * disp)
 {
     drm_dev_t * drm_dev = lv_display_get_driver_data(disp);
@@ -820,6 +821,7 @@ static void drm_flush_wait(lv_display_t * disp)
     }
 }
 
+__attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void drm_flush(lv_display_t * disp, const lv_area_t * area, uint8_t * px_map)
 {
     if(!lv_display_flush_is_last(disp)) return;
diff --git a/src/drivers/display/lcd/lv_lcd_generic_mipi.c b/src/drivers/display/lcd/lv_lcd_generic_mipi.c
index e27e4c860..a68178a18 100644
--- a/src/drivers/display/lcd/lv_lcd_generic_mipi.c
+++ b/src/drivers/display/lcd/lv_lcd_generic_mipi.c
@@ -247,6 +247,7 @@ static void set_swap_xy(lv_lcd_generic_mipi_driver_t * drv, bool swap)
  * @note                transfers pixel data to the LCD controller using the callbacks 'send_cmd' and 'send_color', which were
  *                      passed to the 'lv_st7789_create()' function
  */
+__attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void flush_cb(lv_display_t * disp, const lv_area_t * area, uint8_t * px_map)
 {
     lv_lcd_generic_mipi_driver_t * drv = get_driver(disp);
@@ -315,6 +316,7 @@ static void set_rotation(lv_lcd_generic_mipi_driver_t * drv, lv_display_rotation
  * Handle LV_EVENT_RESOLUTION_CHANGED event (handles both resolution and rotation change)
  * @param e             LV_EVENT_RESOLUTION_CHANGED event
  */
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void res_chg_event_cb(lv_event_t * e)
 {
     lv_display_t * disp = lv_event_get_current_target(e);
diff --git a/src/drivers/display/lcd/lv_lcd_generic_mipi.h b/src/drivers/display/lcd/lv_lcd_generic_mipi.h
index 8daa5e044..b37f9c010 100644
--- a/src/drivers/display/lcd/lv_lcd_generic_mipi.h
+++ b/src/drivers/display/lcd/lv_lcd_generic_mipi.h
@@ -158,7 +158,9 @@ typedef void (*lv_lcd_send_color_cb_t)(lv_display_t * disp, const uint8_t * cmd,
  */
 typedef struct {
     lv_display_t      *     disp;          /* the associated LVGL display object */
+    __attribute__(( fptrgroup("lv_lcd_send_cmd_cb") ))
     lv_lcd_send_cmd_cb_t    send_cmd;       /* platform-specific implementation to send a command to the LCD controller */
+    __attribute__(( fptrgroup("lv_lcd_send_color_cb") ))
     lv_lcd_send_color_cb_t  send_color;     /* platform-specific implementation to send pixel data to the LCD controller */
     uint16_t                x_gap;          /* x offset of the (0,0) pixel in VRAM */
     uint16_t                y_gap;          /* y offset of the (0,0) pixel in VRAM */
diff --git a/src/drivers/display/renesas_glcdc/lv_renesas_glcdc.c b/src/drivers/display/renesas_glcdc/lv_renesas_glcdc.c
index 15b67846d..277262914 100644
--- a/src/drivers/display/renesas_glcdc/lv_renesas_glcdc.c
+++ b/src/drivers/display/renesas_glcdc/lv_renesas_glcdc.c
@@ -238,6 +238,7 @@ static void glcdc_init(void)
 #endif /*_RENESAS_RA_*/
 }
 
+__attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void flush_direct(lv_display_t * display, const lv_area_t * area, uint8_t * px_map)
 {
     FSP_PARAMETER_NOT_USED(area);
@@ -265,6 +266,7 @@ static void flush_direct(lv_display_t * display, const lv_area_t * area, uint8_t
 #endif /*_RENESAS_RA_*/
 }
 
+__attribute__(( fptrgroup("lv_display_flush_wait_cb") ))
 static void flush_wait_direct(lv_display_t * display)
 {
     if(!lv_display_flush_is_last(display)) return;
@@ -280,6 +282,7 @@ static void flush_wait_direct(lv_display_t * display)
 
 }
 
+__attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void flush_partial(lv_display_t * display, const lv_area_t * area, uint8_t * px_map)
 {
     uint16_t * img = (uint16_t *)px_map;
@@ -332,6 +335,7 @@ static void flush_partial(lv_display_t * display, const lv_area_t * area, uint8_
     }
 }
 
+__attribute__(( fptrgroup("lv_display_flush_wait_cb") ))
 static void flush_wait_partial(lv_display_t * display)
 {
     LV_UNUSED(display);
diff --git a/src/drivers/display/tft_espi/lv_tft_espi.cpp b/src/drivers/display/tft_espi/lv_tft_espi.cpp
index 1cb7b45ff..fe09ee96b 100644
--- a/src/drivers/display/tft_espi/lv_tft_espi.cpp
+++ b/src/drivers/display/tft_espi/lv_tft_espi.cpp
@@ -25,6 +25,7 @@ typedef struct {
 /**********************
  *  STATIC PROTOTYPES
  **********************/
+__attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void flush_cb(lv_display_t * disp, const lv_area_t * area, uint8_t * px_map);
 static void resolution_changed_event_cb(lv_event_t * e);
 
@@ -82,6 +83,7 @@ static void flush_cb(lv_display_t * disp, const lv_area_t * area, uint8_t * px_m
 
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void resolution_changed_event_cb(lv_event_t * e)
 {
     lv_display_t * disp = (lv_display_t *)lv_event_get_target(e);
diff --git a/src/drivers/glfw/lv_opengles_texture.c b/src/drivers/glfw/lv_opengles_texture.c
index 02c9dfa7d..5ed6fc87a 100644
--- a/src/drivers/glfw/lv_opengles_texture.c
+++ b/src/drivers/glfw/lv_opengles_texture.c
@@ -33,6 +33,7 @@ typedef struct {
  *  STATIC PROTOTYPES
  **********************/
 
+ __attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void flush_cb(lv_display_t * disp, const lv_area_t * area, uint8_t * px_map);
 static void release_disp_cb(lv_event_t * e);
 
diff --git a/src/drivers/nuttx/lv_nuttx_fbdev.c b/src/drivers/nuttx/lv_nuttx_fbdev.c
index 5ff500e28..8a5e6147a 100644
--- a/src/drivers/nuttx/lv_nuttx_fbdev.c
+++ b/src/drivers/nuttx/lv_nuttx_fbdev.c
@@ -50,6 +50,7 @@ typedef struct {
  *  STATIC PROTOTYPES
  **********************/
 
+ __attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void flush_cb(lv_display_t * disp, const lv_area_t * area, uint8_t * color_p);
 static lv_color_format_t fb_fmt_to_color_format(int fmt);
 static int fbdev_get_pinfo(int fd, struct fb_planeinfo_s * pinfo);
diff --git a/src/drivers/nuttx/lv_nuttx_image_cache.c b/src/drivers/nuttx/lv_nuttx_image_cache.c
index 93f59ed9a..9e213c2c0 100644
--- a/src/drivers/nuttx/lv_nuttx_image_cache.c
+++ b/src/drivers/nuttx/lv_nuttx_image_cache.c
@@ -136,6 +136,7 @@ static bool defer_init(void)
     return true;
 }
 
+__attribute__(( fptrgroup("lv_draw_buf_malloc_cb") ))
 static void * malloc_cb(size_t size_bytes, lv_color_format_t color_format)
 {
     LV_UNUSED(color_format);
diff --git a/src/drivers/nuttx/lv_nuttx_lcd.c b/src/drivers/nuttx/lv_nuttx_lcd.c
index af49cd44d..cb475bd65 100644
--- a/src/drivers/nuttx/lv_nuttx_lcd.c
+++ b/src/drivers/nuttx/lv_nuttx_lcd.c
@@ -134,6 +134,7 @@ static void rounder_cb(lv_event_t * e)
     area->y2 = area->y1 + h - 1;
 }
 
+__attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void flush_cb(lv_display_t * disp, const lv_area_t * area_p,
                      uint8_t * color_p)
 {
diff --git a/src/drivers/x11/lv_x11_display.c b/src/drivers/x11/lv_x11_display.c
index 1a2b83cad..3aef259dc 100644
--- a/src/drivers/x11/lv_x11_display.c
+++ b/src/drivers/x11/lv_x11_display.c
@@ -110,6 +110,7 @@ static inline lv_color32_t get_px(color_t p)
  * @param[in] px_map  contains the rendered image as raw pixel map and it should be copied to `area` on the display.
  * @note              @ref lv_display_flush_ready has to be called when it's finished.
  */
+__attribute__(( fptrgroup("lv_display_flush_cb") ))
 static void x11_flush_cb(lv_display_t * disp, const lv_area_t * area, uint8_t * px_map)
 {
     x11_disp_data_t * xd = lv_display_get_driver_data(disp);
diff --git a/src/font/lv_font.h b/src/font/lv_font.h
index 2f172b9f8..3c4f8844c 100644
--- a/src/font/lv_font.h
+++ b/src/font/lv_font.h
@@ -87,12 +87,15 @@ typedef enum {
 /** Describe the properties of a font*/
 struct lv_font_t {
     /** Get a glyph's descriptor from a font*/
+    __attribute__(( fptrgroup("lv_font_get_glyph_dsc") ))
     bool (*get_glyph_dsc)(const lv_font_t *, lv_font_glyph_dsc_t *, uint32_t letter, uint32_t letter_next);
 
     /** Get a glyph's bitmap from a font*/
+    __attribute__(( fptrgroup("lv_font_get_glyph_bitmap") ))
     const void * (*get_glyph_bitmap)(lv_font_glyph_dsc_t *, lv_draw_buf_t *);
 
     /** Release a glyph*/
+    __attribute__(( fptrgroup("lv_font_release_glyph") ))
     void (*release_glyph)(const lv_font_t *, lv_font_glyph_dsc_t *);
 
     /*Pointer to the font in a font pack (must have the same line height)*/
diff --git a/src/font/lv_font_fmt_txt.c b/src/font/lv_font_fmt_txt.c
index 5d0130454..e7e88c8fe 100644
--- a/src/font/lv_font_fmt_txt.c
+++ b/src/font/lv_font_fmt_txt.c
@@ -74,7 +74,7 @@ static const uint8_t opa2_table[4] = {0, 85, 170, 255};
 /**********************
  *   GLOBAL FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_font_get_glyph_bitmap") ))
 const void * lv_font_get_bitmap_fmt_txt(lv_font_glyph_dsc_t * g_dsc, lv_draw_buf_t * draw_buf)
 {
     const lv_font_t * font = g_dsc->resolved_font;
@@ -165,6 +165,7 @@ const void * lv_font_get_bitmap_fmt_txt(lv_font_glyph_dsc_t * g_dsc, lv_draw_buf
     return NULL;
 }
 
+__attribute__(( fptrgroup("lv_font_get_glyph_dsc") ))
 bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                    uint32_t unicode_letter_next)
 {
@@ -319,6 +320,7 @@ static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t
     return value;
 }
 
+__attribute__(( fptrgroup("lv_utils_cmp") ))
 static int kern_pair_8_compare(const void * ref, const void * element)
 {
     const kern_pair_ref_t * ref8_p = ref;
@@ -329,6 +331,7 @@ static int kern_pair_8_compare(const void * ref, const void * element)
     else return ref8_p->gid_right - element8_p[1];
 }
 
+__attribute__(( fptrgroup("lv_utils_cmp") ))
 static int kern_pair_16_compare(const void * ref, const void * element)
 {
     const kern_pair_ref_t * ref16_p = ref;
@@ -549,6 +552,7 @@ static inline uint8_t rle_next(void)
  *  @retval > 0   Reference is greater than element.
  *
  */
+__attribute__(( fptrgroup("lv_utils_cmp") ))
 static int unicode_list_compare(const void * ref, const void * element)
 {
     return (*(uint16_t *)ref) - (*(uint16_t *)element);
diff --git a/src/indev/lv_indev.c b/src/indev/lv_indev.c
index 3a4a5721a..9fa6d9a1b 100644
--- a/src/indev/lv_indev.c
+++ b/src/indev/lv_indev.c
@@ -142,6 +142,7 @@ lv_indev_t * lv_indev_create(void)
     return indev;
 }
 
+__attribute__(( fptrgroup("lv_ll_cleanup") ))
 void lv_indev_delete(lv_indev_t * indev)
 {
     LV_ASSERT_NULL(indev);
@@ -1700,6 +1701,7 @@ static lv_result_t send_event(lv_event_code_t code, void * param)
     return LV_RESULT_OK;
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void indev_scroll_throw_anim_cb(void * var, int32_t v)
 {
     LV_ASSERT_NULL(var);
@@ -1716,6 +1718,7 @@ static void indev_scroll_throw_anim_cb(void * var, int32_t v)
     }
 }
 
+__attribute__(( fptrgroup("lv_anim_completed_cb"), fptrgroup("lv_anim_deleted_cb") ))
 static void indev_scroll_throw_anim_completed_cb(lv_anim_t * anim)
 {
     if(anim) {
diff --git a/src/indev/lv_indev_private.h b/src/indev/lv_indev_private.h
index a5fa23164..76a8cea5c 100644
--- a/src/indev/lv_indev_private.h
+++ b/src/indev/lv_indev_private.h
@@ -28,6 +28,7 @@ struct lv_indev_t {
     lv_indev_type_t type;
 
     /** Function pointer to read input device data.*/
+    __attribute__(( fptrgroup("lv_indev_read_cb") ))
     lv_indev_read_cb_t read_cb;
 
     lv_indev_state_t state; /**< Current state of the input device.*/
diff --git a/src/layouts/flex/lv_flex.c b/src/layouts/flex/lv_flex.c
index 2af3bf35a..ed5ddb3ea 100644
--- a/src/layouts/flex/lv_flex.c
+++ b/src/layouts/flex/lv_flex.c
@@ -122,7 +122,7 @@ void lv_obj_set_flex_grow(lv_obj_t * obj, uint8_t grow)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_layout_dsc_cb") ))
 static void flex_update(lv_obj_t * cont, void * user_data)
 {
     LV_LOG_INFO("update %p container", (void *)cont);
diff --git a/src/layouts/grid/lv_grid.c b/src/layouts/grid/lv_grid.c
index 70d3f7936..c5104f06e 100644
--- a/src/layouts/grid/lv_grid.c
+++ b/src/layouts/grid/lv_grid.c
@@ -183,7 +183,7 @@ int32_t lv_grid_fr(uint8_t x)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_layout_dsc_cb") ))
 static void grid_update(lv_obj_t * cont, void * user_data)
 {
     LV_LOG_INFO("update %p container", (void *)cont);
diff --git a/src/layouts/lv_layout.c b/src/layouts/lv_layout.c
index ddb3b0e5a..4e23517df 100644
--- a/src/layouts/lv_layout.c
+++ b/src/layouts/lv_layout.c
@@ -65,6 +65,7 @@ uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
     return layout_cnt++;
 }
 
+#pragma stackfunction 1024
 void lv_layout_apply(lv_obj_t * obj)
 {
     lv_layout_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
diff --git a/src/layouts/lv_layout_private.h b/src/layouts/lv_layout_private.h
index dace2fccb..4adb35a9f 100644
--- a/src/layouts/lv_layout_private.h
+++ b/src/layouts/lv_layout_private.h
@@ -25,6 +25,7 @@ extern "C" {
  **********************/
 
 typedef struct {
+    __attribute__(( fptrgroup("lv_layout_dsc_cb") ))
     lv_layout_update_cb_t cb;
     void * user_data;
 } lv_layout_dsc_t;
diff --git a/src/libs/bin_decoder/lv_bin_decoder.c b/src/libs/bin_decoder/lv_bin_decoder.c
index 45edd65eb..6ac65153b 100644
--- a/src/libs/bin_decoder/lv_bin_decoder.c
+++ b/src/libs/bin_decoder/lv_bin_decoder.c
@@ -111,6 +111,7 @@ void lv_bin_decoder_init(void)
     decoder->name = DECODER_NAME;
 }
 
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 lv_result_t lv_bin_decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     LV_UNUSED(decoder); /*Unused*/
@@ -177,6 +178,7 @@ lv_result_t lv_bin_decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_d
  * @param dsc     pointer to the decoder descriptor
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 lv_result_t lv_bin_decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
@@ -375,6 +377,7 @@ void lv_bin_decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t *
     free_decoder_data(dsc);
 }
 
+__attribute__(( fptrgroup("lv_image_deocder_get_area_cb") ))
 lv_result_t lv_bin_decoder_get_area(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc,
                                     const lv_area_t * full_area, lv_area_t * decoded_area)
 {
diff --git a/src/libs/bmp/lv_bmp.c b/src/libs/bmp/lv_bmp.c
index aeb9dad29..d97f1f257 100644
--- a/src/libs/bmp/lv_bmp.c
+++ b/src/libs/bmp/lv_bmp.c
@@ -88,6 +88,7 @@ void lv_bmp_deinit(void)
  * @param header store the info here
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't get the info
  */
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     LV_UNUSED(decoder);
@@ -144,6 +145,7 @@ static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_d
  * @param dsc     pointer to the decoder descriptor
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
@@ -191,6 +193,7 @@ static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_d
     return LV_RESULT_INVALID;    /*If not returned earlier then it failed*/
 }
 
+__attribute__(( fptrgroup("lv_image_deocder_get_area_cb") ))
 static lv_result_t decoder_get_area(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc,
                                     const lv_area_t * full_area, lv_area_t * decoded_area)
 {
@@ -240,6 +243,7 @@ static lv_result_t decoder_get_area(lv_image_decoder_t * decoder, lv_image_decod
 /**
  * Free the allocated resources
  */
+__attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
 static void decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
diff --git a/src/libs/ffmpeg/lv_ffmpeg.c b/src/libs/ffmpeg/lv_ffmpeg.c
index 839ab2a19..63bb2086e 100644
--- a/src/libs/ffmpeg/lv_ffmpeg.c
+++ b/src/libs/ffmpeg/lv_ffmpeg.c
@@ -258,7 +258,7 @@ void lv_ffmpeg_player_set_auto_restart(lv_obj_t * obj, bool en)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     LV_UNUSED(decoder);
@@ -288,6 +288,7 @@ static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_d
  * @param dsc     pointer to the decoder descriptor
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
@@ -333,6 +334,7 @@ static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_d
     return LV_RESULT_INVALID;
 }
 
+__attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
 static void decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
diff --git a/src/libs/freetype/lv_freetype.c b/src/libs/freetype/lv_freetype.c
index b1da8f13e..77c1ff7ae 100755
--- a/src/libs/freetype/lv_freetype.c
+++ b/src/libs/freetype/lv_freetype.c
@@ -348,7 +348,7 @@ static void lv_freetype_drop_face_id(lv_freetype_context_t * ctx, FTC_FaceID fac
 /*-----------------
  * Cache Node Cache Callbacks
  *----------------*/
-
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool cache_node_cache_create_cb(lv_freetype_cache_node_t * node, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -373,6 +373,7 @@ static bool cache_node_cache_create_cb(lv_freetype_cache_node_t * node, void * u
 
     return true;
 }
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void cache_node_cache_free_cb(lv_freetype_cache_node_t * node, void * user_data)
 {
     FT_Done_Face(node->face);
@@ -387,6 +388,7 @@ static void cache_node_cache_free_cb(lv_freetype_cache_node_t * node, void * use
         node->draw_data_cache = NULL;
     }
 }
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t cache_node_cache_compare_cb(const lv_freetype_cache_node_t * lhs,
                                                           const lv_freetype_cache_node_t * rhs)
 {
diff --git a/src/libs/freetype/lv_freetype_glyph.c b/src/libs/freetype/lv_freetype_glyph.c
index 7ed217883..9b7f854b4 100644
--- a/src/libs/freetype/lv_freetype_glyph.c
+++ b/src/libs/freetype/lv_freetype_glyph.c
@@ -75,7 +75,7 @@ void lv_freetype_set_cbs_glyph(lv_freetype_font_dsc_t * dsc)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_font_get_glyph_dsc") ))
 static bool freetype_get_glyph_dsc_cb(const lv_font_t * font, lv_font_glyph_dsc_t * g_dsc, uint32_t unicode_letter,
                                       uint32_t unicode_letter_next)
 {
@@ -123,7 +123,7 @@ static bool freetype_get_glyph_dsc_cb(const lv_font_t * font, lv_font_glyph_dsc_
 /*-----------------
  * Cache Callbacks
  *----------------*/
-
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool freetype_glyph_create_cb(lv_freetype_glyph_cache_data_t * data, void * user_data)
 {
     lv_freetype_font_dsc_t * dsc = (lv_freetype_font_dsc_t *)user_data;
@@ -181,11 +181,13 @@ static bool freetype_glyph_create_cb(lv_freetype_glyph_cache_data_t * data, void
 
     return true;
 }
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void freetype_glyph_free_cb(lv_freetype_glyph_cache_data_t * data, void * user_data)
 {
     LV_UNUSED(data);
     LV_UNUSED(user_data);
 }
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t freetype_glyph_compare_cb(const lv_freetype_glyph_cache_data_t * lhs,
                                                         const lv_freetype_glyph_cache_data_t * rhs)
 {
diff --git a/src/libs/freetype/lv_freetype_image.c b/src/libs/freetype/lv_freetype_image.c
index ab7dad292..cfd44e084 100755
--- a/src/libs/freetype/lv_freetype_image.c
+++ b/src/libs/freetype/lv_freetype_image.c
@@ -117,7 +117,7 @@ static void freetype_image_release_cb(const lv_font_t * font, lv_font_glyph_dsc_
 /*-----------------
  * Cache Callbacks
  *----------------*/
-
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool freetype_image_create_cb(lv_freetype_image_cache_data_t * data, void * user_data)
 {
     lv_freetype_font_dsc_t * dsc = (lv_freetype_font_dsc_t *)user_data;
@@ -168,11 +168,13 @@ static bool freetype_image_create_cb(lv_freetype_image_cache_data_t * data, void
 
     return true;
 }
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void freetype_image_free_cb(lv_freetype_image_cache_data_t * data, void * user_data)
 {
     LV_UNUSED(user_data);
     lv_draw_buf_destroy(data->draw_buf);
 }
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t freetype_image_compare_cb(const lv_freetype_image_cache_data_t * lhs,
                                                         const lv_freetype_image_cache_data_t * rhs)
 {
diff --git a/src/libs/freetype/lv_freetype_outline.c b/src/libs/freetype/lv_freetype_outline.c
index 77d40fef3..5cf92218f 100755
--- a/src/libs/freetype/lv_freetype_outline.c
+++ b/src/libs/freetype/lv_freetype_outline.c
@@ -117,7 +117,7 @@ bool lv_freetype_is_outline_font(const lv_font_t * font)
 /*-------------------
  *   OUTLINE CACHE
  *------------------*/
-
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool freetype_glyph_outline_create_cb(lv_freetype_outline_node_t * node, lv_freetype_font_dsc_t * dsc)
 {
     lv_freetype_outline_t outline;
@@ -140,6 +140,7 @@ static bool freetype_glyph_outline_create_cb(lv_freetype_outline_node_t * node,
     return true;
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void freetype_glyph_outline_free_cb(lv_freetype_outline_node_t * node, lv_freetype_font_dsc_t * dsc)
 {
     LV_UNUSED(dsc);
@@ -149,6 +150,7 @@ static void freetype_glyph_outline_free_cb(lv_freetype_outline_node_t * node, lv
     outline_delete(ctx, outline);
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t freetype_glyph_outline_cmp_cb(const lv_freetype_outline_node_t * node_a,
                                                             const lv_freetype_outline_node_t * node_b)
 {
diff --git a/src/libs/libjpeg_turbo/lv_libjpeg_turbo.c b/src/libs/libjpeg_turbo/lv_libjpeg_turbo.c
index f058728e0..7724f39ad 100644
--- a/src/libs/libjpeg_turbo/lv_libjpeg_turbo.c
+++ b/src/libs/libjpeg_turbo/lv_libjpeg_turbo.c
@@ -104,6 +104,7 @@ void lv_libjpeg_turbo_deinit(void)
  * @param header store the info here
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't get the info
  */
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     LV_UNUSED(decoder); /*Unused*/
@@ -157,6 +158,7 @@ static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_d
  * @param dsc     pointer to the decoder descriptor
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder); /*Unused*/
@@ -199,6 +201,7 @@ static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_d
 /**
  * Free the allocated resources
  */
+__attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
 static void decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder); /*Unused*/
diff --git a/src/libs/libpng/lv_libpng.c b/src/libs/libpng/lv_libpng.c
index 587e5fc69..1382bdddf 100644
--- a/src/libs/libpng/lv_libpng.c
+++ b/src/libs/libpng/lv_libpng.c
@@ -81,6 +81,7 @@ void lv_libpng_deinit(void)
  * @param header store the info here
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't get the info
  */
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     LV_UNUSED(decoder); /*Unused*/
@@ -135,6 +136,7 @@ static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_d
  * @param dsc     pointer to the decoder descriptor
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder); /*Unused*/
@@ -184,6 +186,7 @@ static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_d
 /**
  * Free the allocated resources
  */
+__attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
 static void decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder); /*Unused*/
diff --git a/src/libs/lodepng/lv_lodepng.c b/src/libs/lodepng/lv_lodepng.c
index e5b55de2b..f1b5ba00c 100644
--- a/src/libs/lodepng/lv_lodepng.c
+++ b/src/libs/lodepng/lv_lodepng.c
@@ -82,6 +82,7 @@ void lv_lodepng_deinit(void)
  * @param header    image information is set in header parameter
  * @return          LV_RESULT_OK: no error; LV_RESULT_INVALID: can't get the info
  */
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     LV_UNUSED(decoder); /*Unused*/
@@ -136,6 +137,7 @@ static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_d
  * @param dsc       decoded image descriptor
  * @return          LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
@@ -215,6 +217,7 @@ static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_d
  * @param dsc       decoded image descriptor
  * @return          LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
 static void decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
diff --git a/src/libs/tiny_ttf/lv_tiny_ttf.c b/src/libs/tiny_ttf/lv_tiny_ttf.c
index 899432707..4c40c1773 100644
--- a/src/libs/tiny_ttf/lv_tiny_ttf.c
+++ b/src/libs/tiny_ttf/lv_tiny_ttf.c
@@ -445,7 +445,7 @@ lv_font_t * lv_tiny_ttf_create_data(const void * data, size_t data_size, int32_t
 /*-----------------
  * Cache Callbacks
  *----------------*/
-
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool tiny_ttf_glyph_cache_create_cb(tiny_ttf_glyph_cache_data_t * node, void * user_data)
 {
     ttf_font_desc_t * dsc = (ttf_font_desc_t *)user_data;
@@ -486,12 +486,14 @@ static bool tiny_ttf_glyph_cache_create_cb(tiny_ttf_glyph_cache_data_t * node, v
     return true;
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void tiny_ttf_glyph_cache_free_cb(tiny_ttf_glyph_cache_data_t * node, void * user_data)
 {
     LV_UNUSED(node);
     LV_UNUSED(user_data);
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t tiny_ttf_glyph_cache_compare_cb(const tiny_ttf_glyph_cache_data_t * lhs,
                                                               const tiny_ttf_glyph_cache_data_t * rhs)
 {
@@ -502,6 +504,7 @@ static lv_cache_compare_res_t tiny_ttf_glyph_cache_compare_cb(const tiny_ttf_gly
     return 0;
 }
 
+__attribute__(( fptrgroup("lv_cache_create_cb") ))
 static bool tiny_ttf_draw_data_cache_create_cb(tiny_ttf_cache_data_t * node, void * user_data)
 {
     int g1 = (int)node->glyph_index;
@@ -534,6 +537,7 @@ static bool tiny_ttf_draw_data_cache_create_cb(tiny_ttf_cache_data_t * node, voi
     return true;
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void tiny_ttf_draw_data_cache_free_cb(tiny_ttf_cache_data_t * node, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -541,6 +545,7 @@ static void tiny_ttf_draw_data_cache_free_cb(tiny_ttf_cache_data_t * node, void
     lv_draw_buf_destroy(node->draw_buf);
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t tiny_ttf_draw_data_cache_compare_cb(const tiny_ttf_cache_data_t * lhs,
                                                                   const tiny_ttf_cache_data_t * rhs)
 {
diff --git a/src/libs/tjpgd/lv_tjpgd.c b/src/libs/tjpgd/lv_tjpgd.c
index 650b36ad6..c191abad5 100644
--- a/src/libs/tjpgd/lv_tjpgd.c
+++ b/src/libs/tjpgd/lv_tjpgd.c
@@ -77,7 +77,7 @@ void lv_tjpgd_deinit(void)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_image_deocder_info_cb") ))
 static lv_result_t decoder_info(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc, lv_image_header_t * header)
 {
     LV_UNUSED(decoder);
@@ -150,6 +150,7 @@ static size_t input_func(JDEC * jd, uint8_t * buff, size_t ndata)
  * @param dsc     pointer to the decoder descriptor
  * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
  */
+__attribute__(( fptrgroup("lv_image_deocder_open_cb") ))
 static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
@@ -204,6 +205,7 @@ static lv_result_t decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_d
     return LV_RESULT_OK;
 }
 
+__attribute__(( fptrgroup("lv_image_deocder_get_area_cb") ))
 static lv_result_t decoder_get_area(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc,
                                     const lv_area_t * full_area, lv_area_t * decoded_area)
 {
@@ -280,6 +282,7 @@ static lv_result_t decoder_get_area(lv_image_decoder_t * decoder, lv_image_decod
  * @param decoder pointer to the decoder where this function belongs
  * @param dsc pointer to a descriptor which describes this decoding session
  */
+__attribute__(( fptrgroup("lv_image_deocder_close_cb") ))
 static void decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
 {
     LV_UNUSED(decoder);
diff --git a/src/misc/cache/lv_cache_lru_rb.c b/src/misc/cache/lv_cache_lru_rb.c
index 0a73102d1..47cce4993 100644
--- a/src/misc/cache/lv_cache_lru_rb.c
+++ b/src/misc/cache/lv_cache_lru_rb.c
@@ -64,6 +64,7 @@ struct lv_lru_rb_t {
     lv_rb_t rb;
     lv_ll_t ll;
 
+    __attribute__(( fptrgroup("lv_lru_get_data_size_cb_cb") ))
     get_data_size_cb_t * get_data_size_cb;
 };
 typedef struct lv_lru_rb_t lv_lru_rb_t_;
@@ -177,6 +178,7 @@ inline static void ** get_lru_node(lv_lru_rb_t_ * lru, lv_rb_node_t * node)
     return (void **)((char *)node->data + lru->rb.size - sizeof(void *));
 }
 
+__attribute__(( fptrgroup("lv_cache_alloc_cb") ))
 static void * alloc_cb(void)
 {
     void * res = lv_malloc(sizeof(lv_lru_rb_t_));
@@ -190,6 +192,7 @@ static void * alloc_cb(void)
     return res;
 }
 
+__attribute__(( fptrgroup("lv_cache_init_cb") ))
 static bool init_cnt_cb(lv_cache_t * cache)
 {
     lv_lru_rb_t_ * lru = (lv_lru_rb_t_ *)cache;
@@ -213,6 +216,7 @@ static bool init_cnt_cb(lv_cache_t * cache)
     return true;
 }
 
+__attribute__(( fptrgroup("lv_cache_init_cb") ))
 static bool init_size_cb(lv_cache_t * cache)
 {
     lv_lru_rb_t_ * lru = (lv_lru_rb_t_ *)cache;
@@ -236,6 +240,7 @@ static bool init_size_cb(lv_cache_t * cache)
     return true;
 }
 
+__attribute__(( fptrgroup("lv_cache_destroy_cb") ))
 static void destroy_cb(lv_cache_t * cache, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -251,6 +256,7 @@ static void destroy_cb(lv_cache_t * cache, void * user_data)
     cache->clz->drop_all_cb(cache, user_data);
 }
 
+__attribute__(( fptrgroup("lv_cache_get_cb") ))
 static lv_cache_entry_t * get_cb(lv_cache_t * cache, const void * key, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -288,6 +294,7 @@ static lv_cache_entry_t * get_cb(lv_cache_t * cache, const void * key, void * us
     return NULL;
 }
 
+__attribute__(( fptrgroup("lv_cache_add_cb") ))
 static lv_cache_entry_t * add_cb(lv_cache_t * cache, const void * key, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -313,6 +320,7 @@ static lv_cache_entry_t * add_cb(lv_cache_t * cache, const void * key, void * us
     return entry;
 }
 
+__attribute__(( fptrgroup("lv_cache_remove_cb") ))
 static void remove_cb(lv_cache_t * cache, lv_cache_entry_t * entry, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -340,6 +348,7 @@ static void remove_cb(lv_cache_t * cache, lv_cache_entry_t * entry, void * user_
     cache->size -= lru->get_data_size_cb(data);
 }
 
+__attribute__(( fptrgroup("lv_cache_drop_cb") ))
 static void drop_cb(lv_cache_t * cache, const void * key, void * user_data)
 {
     lv_lru_rb_t_ * lru = (lv_lru_rb_t_ *)cache;
@@ -371,6 +380,7 @@ static void drop_cb(lv_cache_t * cache, const void * key, void * user_data)
     lv_free(lru_node);
 }
 
+__attribute__(( fptrgroup("lv_cache_drop_all_cb") ))
 static void drop_all_cb(lv_cache_t * cache, void * user_data)
 {
     lv_lru_rb_t_ * lru = (lv_lru_rb_t_ *)cache;
@@ -405,6 +415,7 @@ static void drop_all_cb(lv_cache_t * cache, void * user_data)
     cache->size = 0;
 }
 
+__attribute__(( fptrgroup("lv_cache_get_victim_cb") ))
 static lv_cache_entry_t * get_victim_cb(lv_cache_t * cache, void * user_data)
 {
     LV_UNUSED(user_data);
@@ -425,6 +436,7 @@ static lv_cache_entry_t * get_victim_cb(lv_cache_t * cache, void * user_data)
     return NULL;
 }
 
+__attribute__(( fptrgroup("lv_cache_reserve_cond_cb") ))
 static lv_cache_reserve_cond_res_t reserve_cond_cb(lv_cache_t * cache, const void * key, size_t reserved_size,
                                                    void * user_data)
 {
@@ -449,12 +461,14 @@ static lv_cache_reserve_cond_res_t reserve_cond_cb(lv_cache_t * cache, const voi
            : LV_CACHE_RESERVE_COND_OK;
 }
 
+__attribute__(( fptrgroup("lv_lru_get_data_size_cb_cb") ))
 static uint32_t cnt_get_data_size_cb(const void * data)
 {
     LV_UNUSED(data);
     return 1;
 }
 
+__attribute__(( fptrgroup("lv_lru_get_data_size_cb_cb") ))
 static uint32_t size_get_data_size_cb(const void * data)
 {
     lv_cache_slot_size_t * slot = (lv_cache_slot_size_t *)data;
diff --git a/src/misc/cache/lv_cache_private.h b/src/misc/cache/lv_cache_private.h
index c8ac24993..e573c7ec6 100644
--- a/src/misc/cache/lv_cache_private.h
+++ b/src/misc/cache/lv_cache_private.h
@@ -111,8 +111,11 @@ typedef lv_cache_reserve_cond_res_t (*lv_cache_reserve_cond_cb)(lv_cache_t * cac
  * The cache operations struct
  */
 struct lv_cache_ops_t {
+    __attribute__(( fptrgroup("lv_cache_compare_cb") ))
     lv_cache_compare_cb_t compare_cb;    /**< Compare function for keys */
+    __attribute__(( fptrgroup("lv_cache_create_cb") ))
     lv_cache_create_cb_t create_cb;      /**< Create function for nodes */
+    __attribute__(( fptrgroup("lv_cache_free_cb") ))
     lv_cache_free_cb_t free_cb;          /**< Free function for nodes */
 };
 
@@ -144,16 +147,26 @@ struct lv_cache_t {
  * - lv_cache_class_lru_rb_size for LRU-based cache with size-based eviction policy.
  */
 struct lv_cache_class_t {
+    __attribute__(( fptrgroup("lv_cache_alloc_cb") ))
     lv_cache_alloc_cb_t alloc_cb;                 /**< The allocation function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_init_cb") ))
     lv_cache_init_cb_t init_cb;                   /**< The initialization function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_destroy_cb") ))
     lv_cache_destroy_cb_t destroy_cb;             /**< The destruction function for cache entries */
 
+    __attribute__(( fptrgroup("lv_cache_get_cb") ))
     lv_cache_get_cb_t get_cb;                     /**< The get function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_add_cb") ))
     lv_cache_add_cb_t add_cb;                     /**< The add function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_remove_cb") ))
     lv_cache_remove_cb_t remove_cb;               /**< The remove function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_drop_cb") ))
     lv_cache_drop_cb_t drop_cb;                   /**< The drop function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_drop_all_cb") ))
     lv_cache_drop_all_cb_t drop_all_cb;           /**< The drop all function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_get_victim_cb") ))
     lv_cache_get_victim_cb get_victim_cb;         /**< The get victim function for cache entries */
+    __attribute__(( fptrgroup("lv_cache_reserve_cond_cb") ))
     lv_cache_reserve_cond_cb reserve_cond_cb;     /**< The reserve condition function for cache entries */
 };
 
diff --git a/src/misc/cache/lv_image_cache.c b/src/misc/cache/lv_image_cache.c
index c2ca4354e..f42ebe20c 100644
--- a/src/misc/cache/lv_image_cache.c
+++ b/src/misc/cache/lv_image_cache.c
@@ -123,6 +123,7 @@ inline static lv_cache_compare_res_t image_cache_common_compare(const void * lhs
     return lhs_src_type > rhs_src_type ? 1 : -1;
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t image_cache_compare_cb(
     const lv_image_cache_data_t * lhs,
     const lv_image_cache_data_t * rhs)
@@ -130,6 +131,7 @@ static lv_cache_compare_res_t image_cache_compare_cb(
     return image_cache_common_compare(lhs->src, lhs->src_type, rhs->src, rhs->src_type);
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void image_cache_free_cb(lv_image_cache_data_t * entry, void * user_data)
 {
     LV_UNUSED(user_data);
diff --git a/src/misc/cache/lv_image_header_cache.c b/src/misc/cache/lv_image_header_cache.c
index ef124fb0a..27bf40533 100644
--- a/src/misc/cache/lv_image_header_cache.c
+++ b/src/misc/cache/lv_image_header_cache.c
@@ -118,6 +118,7 @@ inline static lv_cache_compare_res_t image_cache_common_compare(const void * lhs
     return lhs_src_type > rhs_src_type ? 1 : -1;
 }
 
+__attribute__(( fptrgroup("lv_cache_compare_cb") ))
 static lv_cache_compare_res_t image_header_cache_compare_cb(
     const lv_image_header_cache_data_t * lhs,
     const lv_image_header_cache_data_t * rhs)
@@ -125,6 +126,7 @@ static lv_cache_compare_res_t image_header_cache_compare_cb(
     return image_cache_common_compare(lhs->src, lhs->src_type, rhs->src, rhs->src_type);
 }
 
+__attribute__(( fptrgroup("lv_cache_free_cb") ))
 static void image_header_cache_free_cb(lv_image_header_cache_data_t * entry, void * user_data)
 {
     LV_UNUSED(user_data); /*Unused*/
diff --git a/src/misc/lv_anim.c b/src/misc/lv_anim.c
index 8fc986764..4addf4d0c 100644
--- a/src/misc/lv_anim.c
+++ b/src/misc/lv_anim.c
@@ -242,6 +242,7 @@ void lv_anim_refr_now(void)
     anim_timer(NULL);
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_linear(const lv_anim_t * a)
 {
     /*Calculate the current step*/
@@ -257,29 +258,34 @@ int32_t lv_anim_path_linear(const lv_anim_t * a)
     return new_value;
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_ease_in(const lv_anim_t * a)
 {
     return lv_anim_path_cubic_bezier(a, LV_BEZIER_VAL_FLOAT(0.42), LV_BEZIER_VAL_FLOAT(0),
                                      LV_BEZIER_VAL_FLOAT(1), LV_BEZIER_VAL_FLOAT(1));
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_ease_out(const lv_anim_t * a)
 {
     return lv_anim_path_cubic_bezier(a, LV_BEZIER_VAL_FLOAT(0), LV_BEZIER_VAL_FLOAT(0),
                                      LV_BEZIER_VAL_FLOAT(0.58), LV_BEZIER_VAL_FLOAT(1));
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_ease_in_out(const lv_anim_t * a)
 {
     return lv_anim_path_cubic_bezier(a, LV_BEZIER_VAL_FLOAT(0.42), LV_BEZIER_VAL_FLOAT(0),
                                      LV_BEZIER_VAL_FLOAT(0.58), LV_BEZIER_VAL_FLOAT(1));
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_overshoot(const lv_anim_t * a)
 {
     return lv_anim_path_cubic_bezier(a, 341, 0, 683, 1300);
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_bounce(const lv_anim_t * a)
 {
     /*Calculate the current step*/
@@ -332,6 +338,7 @@ int32_t lv_anim_path_bounce(const lv_anim_t * a)
     return new_value;
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_step(const lv_anim_t * a)
 {
     if(a->act_time >= a->duration)
@@ -340,6 +347,7 @@ int32_t lv_anim_path_step(const lv_anim_t * a)
         return a->start_value;
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 int32_t lv_anim_path_custom_bezier3(const lv_anim_t * a)
 {
     const lv_anim_bezier3_para_t * para = &a->parameter.bezier3;
@@ -698,6 +706,7 @@ static bool remove_concurrent_anims(lv_anim_t * a_current)
     return del_any;
 }
 
+__attribute__(( fptrgroup("lv_ll_cleanup") ))
 static void remove_anim(void * a)
 {
     lv_anim_t * anim = a;
diff --git a/src/misc/lv_anim.h b/src/misc/lv_anim.h
index 0d626c89b..e86c32231 100644
--- a/src/misc/lv_anim.h
+++ b/src/misc/lv_anim.h
@@ -123,14 +123,21 @@ typedef struct {
 /** Describes an animation*/
 struct lv_anim_t {
     void * var;                               /**< Variable to animate*/
+    __attribute__(( fptrgroup("lv_anim_exec_cb") ))
     lv_anim_exec_xcb_t exec_cb;               /**< Function to execute to animate*/
+    __attribute__(( fptrgroup("lv_anim_custom_exec_cb") ))
     lv_anim_custom_exec_cb_t custom_exec_cb;  /**< Function to execute to animate,
                                                * same purpose as exec_cb but different parameters*/
+    __attribute__(( fptrgroup("lv_anim_start_cb") ))
     lv_anim_start_cb_t start_cb;              /**< Call it when the animation is starts (considering `delay`)*/
+    __attribute__(( fptrgroup("lv_anim_completed_cb") ))
     lv_anim_completed_cb_t completed_cb;      /**< Call it when the animation is fully completed*/
+    __attribute__(( fptrgroup("lv_anim_deleted_cb") ))
     lv_anim_deleted_cb_t deleted_cb;          /**< Call it when the animation is deleted*/
+    __attribute__(( fptrgroup("lv_anim_get_value_cb") ))
     lv_anim_get_value_cb_t get_value_cb;      /**< Get the current value in relative mode*/
     void * user_data;                         /**< Custom user data*/
+    __attribute__(( fptrgroup("lv_anim_path_cb") ))
     lv_anim_path_cb_t path_cb;                /**< Describe the path (curve) of animations*/
     int32_t start_value;                      /**< Start value*/
     int32_t current_value;                    /**< Current value*/
diff --git a/src/misc/lv_anim_timeline.c b/src/misc/lv_anim_timeline.c
index f9cd53056..ad1d1c8be 100644
--- a/src/misc/lv_anim_timeline.c
+++ b/src/misc/lv_anim_timeline.c
@@ -298,12 +298,14 @@ static void anim_timeline_set_act_time(lv_anim_timeline_t * at, uint32_t act_tim
     }
 }
 
+__attribute__(( fptrgroup("lv_anim_path_cb") ))
 static int32_t anim_timeline_path_cb(const lv_anim_t * a)
 {
     /* Directly map original timestamps to avoid loss of accuracy */
     return lv_map(a->act_time, 0, a->duration, a->start_value, a->end_value);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void anim_timeline_exec_cb(void * var, int32_t v)
 {
     lv_anim_timeline_t * at = var;
diff --git a/src/misc/lv_area.c b/src/misc/lv_area.c
index 4410076d6..9319f255e 100644
--- a/src/misc/lv_area.c
+++ b/src/misc/lv_area.c
@@ -181,6 +181,7 @@ void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t *
     a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 }
 
+#pragma stackfunction 2048
 bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, int32_t radius)
 {
     /*First check the basic area*/
diff --git a/src/misc/lv_async.c b/src/misc/lv_async.c
index e1657aeb4..c4e11d5d1 100644
--- a/src/misc/lv_async.c
+++ b/src/misc/lv_async.c
@@ -20,6 +20,7 @@
  **********************/
 
 typedef struct lv_async_info_t {
+    __attribute__(( fptrgroup("lv_async_info_cb") ))
     lv_async_cb_t cb;
     void * user_data;
 } lv_async_info_t;
diff --git a/src/misc/lv_color.h b/src/misc/lv_color.h
index 6328c0d2c..a234dcd2e 100644
--- a/src/misc/lv_color.h
+++ b/src/misc/lv_color.h
@@ -98,7 +98,7 @@ typedef struct {
     uint8_t blue;
     uint8_t green;
     uint8_t red;
-} lv_color_t;
+} __attribute__ ((aligned (2))) lv_color_t;
 
 typedef struct {
     uint16_t blue : 5;
diff --git a/src/misc/lv_event_private.h b/src/misc/lv_event_private.h
index b31ca81b8..037526e2c 100644
--- a/src/misc/lv_event_private.h
+++ b/src/misc/lv_event_private.h
@@ -25,6 +25,7 @@ extern "C" {
  **********************/
 
 struct lv_event_dsc_t {
+    __attribute__(( fptrgroup("lv_event_cb") ))
     lv_event_cb_t cb;
     void * user_data;
     uint32_t filter;
diff --git a/src/misc/lv_fs.h b/src/misc/lv_fs.h
index c6f938b7d..5dfa339b8 100644
--- a/src/misc/lv_fs.h
+++ b/src/misc/lv_fs.h
@@ -69,17 +69,27 @@ typedef struct lv_fs_drv_t lv_fs_drv_t;
 struct lv_fs_drv_t {
     char letter;
     uint32_t cache_size;
+    __attribute__(( fptrgroup("lv_fs_ready_cb") ))
     bool (*ready_cb)(lv_fs_drv_t * drv);
 
+    __attribute__(( fptrgroup("lv_fs_open_cb") ))
     void * (*open_cb)(lv_fs_drv_t * drv, const char * path, lv_fs_mode_t mode);
+    __attribute__(( fptrgroup("lv_fs_close_cb") ))
     lv_fs_res_t (*close_cb)(lv_fs_drv_t * drv, void * file_p);
+    __attribute__(( fptrgroup("lv_fs_read_cb") ))
     lv_fs_res_t (*read_cb)(lv_fs_drv_t * drv, void * file_p, void * buf, uint32_t btr, uint32_t * br);
+    __attribute__(( fptrgroup("lv_fs_write_cb") ))
     lv_fs_res_t (*write_cb)(lv_fs_drv_t * drv, void * file_p, const void * buf, uint32_t btw, uint32_t * bw);
+    __attribute__(( fptrgroup("lv_fs_seek_cb") ))
     lv_fs_res_t (*seek_cb)(lv_fs_drv_t * drv, void * file_p, uint32_t pos, lv_fs_whence_t whence);
+    __attribute__(( fptrgroup("lv_fs_tell_cb") ))
     lv_fs_res_t (*tell_cb)(lv_fs_drv_t * drv, void * file_p, uint32_t * pos_p);
 
+    __attribute__(( fptrgroup("lv_fs_dir_open_cb") ))
     void * (*dir_open_cb)(lv_fs_drv_t * drv, const char * path);
+    __attribute__(( fptrgroup("lv_fs_dir_read_cb") ))
     lv_fs_res_t (*dir_read_cb)(lv_fs_drv_t * drv, void * rddir_p, char * fn, uint32_t fn_len);
+    __attribute__(( fptrgroup("lv_fs_dir_close_cb") ))
     lv_fs_res_t (*dir_close_cb)(lv_fs_drv_t * drv, void * rddir_p);
 
     void * user_data; /**< Custom file user data*/
diff --git a/src/misc/lv_ll.c b/src/misc/lv_ll.c
index ca1339ec5..d962150c9 100644
--- a/src/misc/lv_ll.c
+++ b/src/misc/lv_ll.c
@@ -157,7 +157,7 @@ void lv_ll_remove(lv_ll_t * ll_p, void * node_p)
     }
 }
 
-void lv_ll_clear_custom(lv_ll_t * ll_p, void(*cleanup)(void *))
+void lv_ll_clear_custom(lv_ll_t * ll_p, __attribute__(( fptrgroup("lv_ll_cleanup") )) void(*cleanup)(void *))
 {
     void * i;
     void * i_next;
@@ -212,18 +212,21 @@ void lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool he
     }
 }
 
+__attribute__(( fptrgroup("lv_ll_get") ))
 void * lv_ll_get_head(const lv_ll_t * ll_p)
 {
     if(ll_p == NULL) return NULL;
     return ll_p->head;
 }
 
+__attribute__(( fptrgroup("lv_ll_get") ))
 void * lv_ll_get_tail(const lv_ll_t * ll_p)
 {
     if(ll_p == NULL) return NULL;
     return ll_p->tail;
 }
 
+__attribute__(( fptrgroup("lv_ll_get") ))
 void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
 {
     /*Pointer to the next node is stored in the end of this node.
@@ -233,6 +236,7 @@ void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
     return *((lv_ll_node_t **)n_act_d);
 }
 
+__attribute__(( fptrgroup("lv_ll_get") ))
 void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
 {
     /*Pointer to the prev. node is stored in the end of this node.
diff --git a/src/misc/lv_profiler_builtin.c b/src/misc/lv_profiler_builtin.c
index b6b6fd435..12567d1a4 100644
--- a/src/misc/lv_profiler_builtin.c
+++ b/src/misc/lv_profiler_builtin.c
@@ -208,16 +208,19 @@ void lv_profiler_builtin_write(const char * func, char tag)
  *   STATIC FUNCTIONS
  **********************/
 
+__attribute__(( fptrgroup("lv_profiler_flush_cb") ))
 static void default_flush_cb(const char * buf)
 {
     LV_LOG("%s", buf);
 }
 
+__attribute__(( fptrgroup("lv_profiler_tid_get_cb") ))
 static int default_tid_get_cb(void)
 {
     return 1;
 }
 
+__attribute__(( fptrgroup("lv_profiler_cpu_get_cb") ))
 static int default_cpu_get_cb(void)
 {
     return 0;
diff --git a/src/misc/lv_profiler_builtin_private.h b/src/misc/lv_profiler_builtin_private.h
index 3fb9938a2..519a13226 100644
--- a/src/misc/lv_profiler_builtin_private.h
+++ b/src/misc/lv_profiler_builtin_private.h
@@ -32,9 +32,13 @@ extern "C" {
 struct lv_profiler_builtin_config_t {
     size_t buf_size;                    /**< The size of the buffer used for profiling data */
     uint32_t tick_per_sec;              /**< The number of ticks per second */
+    __attribute__(( fptrgroup("lv_profiler_tick_get_cb") ))
     uint32_t (*tick_get_cb)(void);      /**< Callback function to get the current tick count */
+    __attribute__(( fptrgroup("lv_profiler_flush_cb") ))
     void (*flush_cb)(const char * buf); /**< Callback function to flush the profiling data */
+    __attribute__(( fptrgroup("lv_profiler_tid_get_cb") ))
     int (*tid_get_cb)(void);            /**< Callback function to get the current thread ID */
+    __attribute__(( fptrgroup("lv_profiler_cpu_get_cb") ))
     int (*cpu_get_cb)(void);            /**< Callback function to get the current CPU */
 };
 
diff --git a/src/misc/lv_rb_private.h b/src/misc/lv_rb_private.h
index 327b7b0be..86c7cae8c 100644
--- a/src/misc/lv_rb_private.h
+++ b/src/misc/lv_rb_private.h
@@ -34,6 +34,7 @@ struct lv_rb_node_t {
 
 struct lv_rb_t {
     lv_rb_node_t * root;
+    __attribute__(( fptrgroup("lv_cache_compare_cb") ))
     lv_rb_compare_t compare;
     size_t size;
 };
diff --git a/src/misc/lv_style.h b/src/misc/lv_style.h
index dcce7dcd6..a671c76ec 100644
--- a/src/misc/lv_style.h
+++ b/src/misc/lv_style.h
@@ -348,6 +348,7 @@ typedef enum {
 typedef struct {
     const lv_style_prop_t * props; /**< An array with the properties to animate.*/
     void * user_data;              /**< A custom user data that will be passed to the animation's user_data */
+    __attribute__(( fptrgroup("lv_anim_path_cb") ))
     lv_anim_path_cb_t path_xcb;    /**< A path for the animation.*/
     uint32_t time;                 /**< Duration of the transition in [ms]*/
     uint32_t delay;                /**< Delay before the transition in [ms]*/
diff --git a/src/misc/lv_text.c b/src/misc/lv_text.c
index 11081f959..fe1209896 100644
--- a/src/misc/lv_text.c
+++ b/src/misc/lv_text.c
@@ -464,6 +464,7 @@ void lv_text_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t
  * @param str pointer to a character in a string
  * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
  */
+__attribute__(( fptrgroup("lv_text_encoded_size_cb") ))
 static uint8_t lv_text_utf8_size(const char * str)
 {
     if(LV_IS_ASCII(str[0]))
@@ -482,6 +483,7 @@ static uint8_t lv_text_utf8_size(const char * str)
  * @param letter_uni a Unicode letter
  * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
  */
+__attribute__(( fptrgroup("lv_text_unicode_to_encoded") ))
 static uint32_t lv_text_unicode_to_utf8(uint32_t letter_uni)
 {
     if(letter_uni < 128) return letter_uni;
@@ -518,6 +520,7 @@ static uint32_t lv_text_unicode_to_utf8(uint32_t letter_uni)
  * @param c a wide character or a  Little endian number
  * @return `c` in big endian
  */
+__attribute__(( fptrgroup("lv_text_encoded_conv_wc") ))
 static uint32_t lv_text_utf8_conv_wc(uint32_t c)
 {
 #if LV_BIG_ENDIAN_SYSTEM == 0
@@ -546,6 +549,7 @@ static uint32_t lv_text_utf8_conv_wc(uint32_t c)
  *          NULL to use txt[0] as index
  * @return the decoded Unicode character or 0 on invalid UTF-8 code
  */
+__attribute__(( fptrgroup("lv_text_encoded_next") ))
 static uint32_t lv_text_utf8_next(const char * txt, uint32_t * i)
 {
     /**
@@ -621,6 +625,7 @@ static uint32_t lv_text_utf8_next(const char * txt, uint32_t * i)
  * UTF-8 char in 'txt'.
  * @return the decoded Unicode character or 0 on invalid UTF-8 code
  */
+__attribute__(( fptrgroup("lv_text_encoded_prev") ))
 static uint32_t lv_text_utf8_prev(const char * txt, uint32_t * i)
 {
     uint8_t c_size;
@@ -654,6 +659,7 @@ static uint32_t lv_text_utf8_prev(const char * txt, uint32_t * i)
  * @param utf8_id character index
  * @return byte index of the 'utf8_id'th letter
  */
+__attribute__(( fptrgroup("lv_text_encoded_get_byte_id") ))
 static uint32_t lv_text_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
 {
     uint32_t i;
@@ -674,6 +680,7 @@ static uint32_t lv_text_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
  * @param byte_id byte index
  * @return character index of the letter at 'byte_id'th position
  */
+__attribute__(( fptrgroup("lv_text_encoded_get_char_id") ))
 static uint32_t lv_text_utf8_get_char_id(const char * txt, uint32_t byte_id)
 {
     uint32_t i        = 0;
@@ -693,6 +700,7 @@ static uint32_t lv_text_utf8_get_char_id(const char * txt, uint32_t byte_id)
  * @param txt a '\0' terminated char string
  * @return number of characters
  */
+__attribute__(( fptrgroup("lv_text_get_encoded_length") ))
 static uint32_t lv_text_utf8_get_length(const char * txt)
 {
     uint32_t len = 0;
@@ -716,6 +724,7 @@ static uint32_t lv_text_utf8_get_length(const char * txt)
  * @param str pointer to a character in a string
  * @return length of the ISO8859-1 coded character, will be always 1.
  */
+__attribute__(( fptrgroup("lv_text_encoded_size") ))
 static uint8_t lv_text_iso8859_1_size(const char * str)
 {
     LV_UNUSED(str); /*Unused*/
@@ -727,6 +736,7 @@ static uint8_t lv_text_iso8859_1_size(const char * str)
  * @param letter_uni a Unicode letter
  * @return ISO8859-1 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
  */
+__attribute__(( fptrgroup("lv_text_unicode_to_encoded") ))
 static uint32_t lv_text_unicode_to_iso8859_1(uint32_t letter_uni)
 {
     if(letter_uni < 256)
@@ -741,6 +751,7 @@ static uint32_t lv_text_unicode_to_iso8859_1(uint32_t letter_uni)
  * @param c a character, e.g. 'A'
  * @return same as `c`
  */
+__attribute__(( fptrgroup("lv_text_encoded_conv_wc") ))
 static uint32_t lv_text_iso8859_1_conv_wc(uint32_t c)
 {
     return c;
@@ -754,6 +765,7 @@ static uint32_t lv_text_iso8859_1_conv_wc(uint32_t c)
  *          NULL to use txt[0] as index
  * @return the decoded ISO8859-1 character.
  */
+__attribute__(( fptrgroup("lv_text_encoded_next") ))
 static uint32_t lv_text_iso8859_1_next(const char * txt, uint32_t * i)
 {
     if(i == NULL) return txt[0]; /*Get the next char*/
@@ -769,6 +781,7 @@ static uint32_t lv_text_iso8859_1_next(const char * txt, uint32_t * i)
  * @param i start byte index in 'txt' where to start. After the call it will point to the previous ISO8859-1 coded char in 'txt'.
  * @return the decoded ISO8859-1 character.
  */
+__attribute__(( fptrgroup("lv_text_encoded_prev") ))
 static uint32_t lv_text_iso8859_1_prev(const char * txt, uint32_t * i)
 {
     if(i == NULL) return *(txt - 1); /*Get the prev. char*/
@@ -786,6 +799,7 @@ static uint32_t lv_text_iso8859_1_prev(const char * txt, uint32_t * i)
  * @param utf8_id character index
  * @return byte index of the 'utf8_id'th letter
  */
+__attribute__(( fptrgroup("lv_text_encoded_get_byte_id") ))
 static uint32_t lv_text_iso8859_1_get_byte_id(const char * txt, uint32_t utf8_id)
 {
     LV_UNUSED(txt); /*Unused*/
@@ -799,6 +813,7 @@ static uint32_t lv_text_iso8859_1_get_byte_id(const char * txt, uint32_t utf8_id
  * @param byte_id byte index
  * @return character index of the letter at 'byte_id'th position
  */
+__attribute__(( fptrgroup("lv_text_encoded_get_char_id") ))
 static uint32_t lv_text_iso8859_1_get_char_id(const char * txt, uint32_t byte_id)
 {
     LV_UNUSED(txt); /*Unused*/
@@ -811,6 +826,7 @@ static uint32_t lv_text_iso8859_1_get_char_id(const char * txt, uint32_t byte_id
  * @param txt a '\0' terminated char string
  * @return number of characters
  */
+__attribute__(( fptrgroup("lv_text_get_encoded_length") ))
 static uint32_t lv_text_iso8859_1_get_length(const char * txt)
 {
     return lv_strlen(txt);
diff --git a/src/misc/lv_text_private.h b/src/misc/lv_text_private.h
index 858f59383..5f72f1096 100644
--- a/src/misc/lv_text_private.h
+++ b/src/misc/lv_text_private.h
@@ -199,6 +199,7 @@ static inline bool lv_text_is_marker(uint32_t letter)
  * @param txt  pointer to a character in a string
  * @return length of the encoded character (1,2,3 ...). O in invalid
  */
+__attribute__(( fptrgroup("lv_text_encoded_size") ))
 extern uint8_t (*const lv_text_encoded_size)(const char * txt);
 
 /**
@@ -206,6 +207,7 @@ extern uint8_t (*const lv_text_encoded_size)(const char * txt);
  * @param letter_uni a Unicode letter
  * @return Encoded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ü')
  */
+__attribute__(( fptrgroup("lv_text_unicode_to_encoded") ))
 extern uint32_t (*const lv_text_unicode_to_encoded)(uint32_t letter_uni);
 
 /**
@@ -213,6 +215,7 @@ extern uint32_t (*const lv_text_unicode_to_encoded)(uint32_t letter_uni);
  * @param c a wide character
  * @return `c` in the encoded format
  */
+__attribute__(( fptrgroup("lv_text_encoded_conv_wc") ))
 extern uint32_t (*const lv_text_encoded_conv_wc)(uint32_t c);
 
 /**
@@ -223,6 +226,7 @@ extern uint32_t (*const lv_text_encoded_conv_wc)(uint32_t c);
  *                 NULL to use txt[0] as index
  * @return the decoded Unicode character or 0 on invalid data code
  */
+__attribute__(( fptrgroup("lv_text_encoded_next") ))
 extern uint32_t (*const lv_text_encoded_next)(const char * txt, uint32_t * i_start);
 
 /**
@@ -234,6 +238,7 @@ extern uint32_t (*const lv_text_encoded_next)(const char * txt, uint32_t * i_sta
  *
  * @return the decoded Unicode character or 0 on invalid data
  */
+__attribute__(( fptrgroup("lv_text_encoded_prev") ))
 extern uint32_t (*const lv_text_encoded_prev)(const char * txt, uint32_t * i_start);
 
 /**
@@ -243,6 +248,7 @@ extern uint32_t (*const lv_text_encoded_prev)(const char * txt, uint32_t * i_sta
  * @param utf8_id character index
  * @return byte index of the 'enc_id'th letter
  */
+__attribute__(( fptrgroup("lv_text_encoded_get_byte_id") ))
 extern uint32_t (*const lv_text_encoded_get_byte_id)(const char * txt, uint32_t utf8_id);
 
 /**
@@ -252,6 +258,7 @@ extern uint32_t (*const lv_text_encoded_get_byte_id)(const char * txt, uint32_t
  * @param byte_id byte index
  * @return character index of the letter at 'byte_id'th position
  */
+__attribute__(( fptrgroup("lv_text_encoded_get_char_id") ))
 extern uint32_t (*const lv_text_encoded_get_char_id)(const char * txt, uint32_t byte_id);
 
 /**
@@ -260,6 +267,7 @@ extern uint32_t (*const lv_text_encoded_get_char_id)(const char * txt, uint32_t
  * @param txt a '\0' terminated char string
  * @return number of characters
  */
+__attribute__(( fptrgroup("lv_text_get_encoded_length") ))
 extern uint32_t (*const lv_text_get_encoded_length)(const char * txt);
 
 /**********************
diff --git a/src/misc/lv_timer.c b/src/misc/lv_timer.c
index 959ce53b9..b25ff0596 100644
--- a/src/misc/lv_timer.c
+++ b/src/misc/lv_timer.c
@@ -60,6 +60,7 @@ void lv_timer_core_init(void)
     lv_timer_enable(true);
 }
 
+#pragma stackfunction 1024
 LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler(void)
 {
     LV_TRACE_TIMER("begin");
diff --git a/src/misc/lv_timer_private.h b/src/misc/lv_timer_private.h
index b7f42b0a1..fd1833b42 100644
--- a/src/misc/lv_timer_private.h
+++ b/src/misc/lv_timer_private.h
@@ -30,6 +30,7 @@ extern "C" {
 struct lv_timer_t {
     uint32_t period;           /**< How often the timer should run */
     uint32_t last_run;         /**< Last time the timer ran */
+    __attribute__(( fptrgroup("lv_timer_cb") ))
     lv_timer_cb_t timer_cb;    /**< Timer function */
     void * user_data;          /**< Custom user data */
     int32_t repeat_count;      /**< 1: One time;  -1 : infinity;  n>0: residual times */
@@ -52,6 +53,7 @@ typedef struct {
     uint32_t idle_period_start;
     uint32_t run_cnt;
 
+    __attribute__(( fptrgroup("lv_timer_resume_cb") ))
     lv_timer_handler_resume_cb_t resume_cb;
     void * resume_data;
 } lv_timer_state_t;
diff --git a/src/misc/lv_utils.c b/src/misc/lv_utils.c
index 868692170..82024f64d 100644
--- a/src/misc/lv_utils.c
+++ b/src/misc/lv_utils.c
@@ -36,7 +36,7 @@
  **********************/
 
 void * lv_utils_bsearch(const void * key, const void * base, size_t n, size_t size,
-                        int (*cmp)(const void * pRef, const void * pElement))
+    __attribute__(( fptrgroup("lv_utils_cmp") ))int (*cmp)(const void * pRef, const void * pElement))
 {
     const char * middle;
     int32_t c;
diff --git a/src/others/file_explorer/lv_file_explorer.c b/src/others/file_explorer/lv_file_explorer.c
index bb0220c89..a64592f9d 100644
--- a/src/others/file_explorer/lv_file_explorer.c
+++ b/src/others/file_explorer/lv_file_explorer.c
@@ -420,6 +420,7 @@ static void init_style(lv_obj_t * obj)
 }
 
 #if LV_FILE_EXPLORER_QUICK_ACCESS
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void quick_access_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -457,6 +458,7 @@ static void quick_access_event_handler(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void quick_access_area_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -474,6 +476,7 @@ static void quick_access_area_event_handler(lv_event_t * e)
 }
 #endif
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void browser_file_event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/src/others/fragment/lv_fragment.c b/src/others/fragment/lv_fragment.c
index 6deb4e785..0c0f41618 100644
--- a/src/others/fragment/lv_fragment.c
+++ b/src/others/fragment/lv_fragment.c
@@ -145,7 +145,7 @@ void lv_fragment_recreate_obj(lv_fragment_t * fragment)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void cb_delete_assertion(lv_event_t * event)
 {
     LV_UNUSED(event);
diff --git a/src/others/fragment/lv_fragment.h b/src/others/fragment/lv_fragment.h
index f93473757..468d53264 100644
--- a/src/others/fragment/lv_fragment.h
+++ b/src/others/fragment/lv_fragment.h
@@ -55,24 +55,28 @@ struct lv_fragment_class_t {
      * @param self Fragment instance
      * @param args Arguments assigned by fragment manager
      */
+    __attribute__(( fptrgroup("lv_fragment_constructor_cb") ))
     void (*constructor_cb)(lv_fragment_t * self, void * args);
 
     /**
      * Destructor function for fragment class
      * @param self Fragment instance, will be freed after this call
      */
+    __attribute__(( fptrgroup("lv_fragment_destructor_cb") ))
     void (*destructor_cb)(lv_fragment_t * self);
 
     /**
      * Fragment attached to manager
      * @param self Fragment instance
      */
+    __attribute__(( fptrgroup("lv_fragment_attached_cb") ))
     void (*attached_cb)(lv_fragment_t * self);
 
     /**
      * Fragment detached from manager
      * @param self Fragment instance
      */
+    __attribute__(( fptrgroup("lv_event_cb") ))
     void (*detached_cb)(lv_fragment_t * self);
 
     /**
@@ -81,6 +85,7 @@ struct lv_fragment_class_t {
      * @param container Container of the objects should be created upon
      * @return Created object, NULL if multiple objects has been created
      */
+    __attribute__(( fptrgroup("lv_fragment_create_obj_cb") ))
     lv_obj_t * (*create_obj_cb)(lv_fragment_t * self, lv_obj_t * container);
 
     /**
@@ -88,6 +93,7 @@ struct lv_fragment_class_t {
      * @param self Fragment instance
      * @param obj lv_obj returned by create_obj_cb
      */
+    __attribute__(( fptrgroup("lv_fragment_obj_created_cb") ))
     void (*obj_created_cb)(lv_fragment_t * self, lv_obj_t * obj);
 
     /**
@@ -96,6 +102,7 @@ struct lv_fragment_class_t {
      * @param self Fragment instance
      * @param obj object with this fragment
      */
+    __attribute__(( fptrgroup("lv_fragment_obj_will_delete_cb") ))
     void (*obj_will_delete_cb)(lv_fragment_t * self, lv_obj_t * obj);
 
     /**
@@ -103,6 +110,7 @@ struct lv_fragment_class_t {
      * @param self Fragment instance
      * @param obj object with this fragment
      */
+    __attribute__(( fptrgroup("lv_fragment_obj_deleted_cb") ))
     void (*obj_deleted_cb)(lv_fragment_t * self, lv_obj_t * obj);
 
     /**
@@ -112,6 +120,7 @@ struct lv_fragment_class_t {
      * @param data1 User-defined data
      * @param data2 User-defined data
      */
+    __attribute__(( fptrgroup("lv_fragment_event_cb") ))
     bool (*event_cb)(lv_fragment_t * self, int code, void * userdata);
 
     /**
diff --git a/src/others/gridnav/lv_gridnav.c b/src/others/gridnav/lv_gridnav.c
index 5f348af58..b84b540d4 100644
--- a/src/others/gridnav/lv_gridnav.c
+++ b/src/others/gridnav/lv_gridnav.c
@@ -127,7 +127,7 @@ void lv_gridnav_set_focused(lv_obj_t * cont, lv_obj_t * to_focus, lv_anim_enable
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void gridnav_event_cb(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_current_target(e);
diff --git a/src/others/ime/lv_ime_pinyin.c b/src/others/ime/lv_ime_pinyin.c
index 8382269b7..6e2def413 100644
--- a/src/others/ime/lv_ime_pinyin.c
+++ b/src/others/ime/lv_ime_pinyin.c
@@ -601,6 +601,7 @@ static void lv_ime_pinyin_destructor(const lv_obj_class_t * class_p, lv_obj_t *
         lv_obj_delete(pinyin_ime->cand_panel);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void lv_ime_pinyin_kb_event(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -738,6 +739,7 @@ static void lv_ime_pinyin_kb_event(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void lv_ime_pinyin_cand_panel_event(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -841,6 +843,7 @@ static void pinyin_page_proc(lv_obj_t * obj, uint16_t dir)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void lv_ime_pinyin_style_change_event(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/src/others/observer/lv_observer.c b/src/others/observer/lv_observer.c
index 8d43f52de..dabb355d4 100644
--- a/src/others/observer/lv_observer.c
+++ b/src/others/observer/lv_observer.c
@@ -559,6 +559,7 @@ static void group_notify_cb(lv_observer_t * observer, lv_subject_t * subject)
     lv_subject_notify(subject_group);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void unsubscribe_on_delete_cb(lv_event_t * e)
 {
     lv_observer_t * observer = lv_event_get_user_data(e);
@@ -618,6 +619,7 @@ static void obj_state_observer_cb(lv_observer_t * observer, lv_subject_t * subje
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void obj_value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_current_target(e);
@@ -654,6 +656,7 @@ static void label_text_observer_cb(lv_observer_t * observer, lv_subject_t * subj
 
 #if LV_USE_ARC
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void arc_value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * arc = lv_event_get_current_target(e);
@@ -671,6 +674,7 @@ static void arc_value_observer_cb(lv_observer_t * observer, lv_subject_t * subje
 
 #if LV_USE_SLIDER
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void slider_value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * slider = lv_event_get_current_target(e);
@@ -688,6 +692,7 @@ static void slider_value_observer_cb(lv_observer_t * observer, lv_subject_t * su
 
 #if LV_USE_ROLLER
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void roller_value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * roller = lv_event_get_current_target(e);
@@ -707,6 +712,7 @@ static void roller_value_observer_cb(lv_observer_t * observer, lv_subject_t * su
 
 #if LV_USE_DROPDOWN
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void dropdown_value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * dropdown = lv_event_get_current_target(e);
diff --git a/src/others/observer/lv_observer_private.h b/src/others/observer/lv_observer_private.h
index 04a7992eb..1ab153387 100644
--- a/src/others/observer/lv_observer_private.h
+++ b/src/others/observer/lv_observer_private.h
@@ -31,6 +31,7 @@ extern "C" {
  */
 struct lv_observer_t {
     lv_subject_t * subject;             /**< The observed value */
+    __attribute__(( fptrgroup("lv_observer_cb") ))
     lv_observer_cb_t cb;                /**< Callback that should be called when the value changes*/
     void * target;                      /**< A target for the observer, e.g. a widget or style*/
     void * user_data;                   /**< Additional parameter supplied when subscribing*/
diff --git a/src/others/sysmon/lv_sysmon.c b/src/others/sysmon/lv_sysmon.c
index 803ce8c5e..0bf124617 100644
--- a/src/others/sysmon/lv_sysmon.c
+++ b/src/others/sysmon/lv_sysmon.c
@@ -178,6 +178,7 @@ void lv_sysmon_hide_memory(lv_display_t * disp)
 
 #if LV_USE_PERF_MONITOR
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void perf_monitor_disp_event_cb(lv_event_t * e)
 {
     lv_display_t * disp = lv_event_get_target(e);
diff --git a/src/stdlib/builtin/lv_sprintf_builtin.c b/src/stdlib/builtin/lv_sprintf_builtin.c
index fc34db4d1..4ebad8ca1 100644
--- a/src/stdlib/builtin/lv_sprintf_builtin.c
+++ b/src/stdlib/builtin/lv_sprintf_builtin.c
@@ -552,6 +552,7 @@ static size_t _etoa(out_fct_type out, char * buffer, size_t idx, size_t maxlen,
 #endif  // PRINTF_SUPPORT_FLOAT
 
 // internal vsnprintf
+#pragma stackfunction 4096
 static int lv_vsnprintf_inner(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 {
     unsigned int flags, width, precision, n;
diff --git a/src/themes/lv_theme.c b/src/themes/lv_theme.c
index 5dcd6c6ae..6424c1a67 100644
--- a/src/themes/lv_theme.c
+++ b/src/themes/lv_theme.c
@@ -96,13 +96,14 @@ lv_color_t lv_theme_get_color_secondary(lv_obj_t * obj)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+#pragma stackfunction 2048
 static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
 {
     if(th->parent) apply_theme(th->parent, obj);
     if(th->apply_cb) th->apply_cb(th, obj);
 }
 
+#pragma stackfunction 2048
 static void apply_theme_recursion(lv_theme_t * th, lv_obj_t * obj)
 {
     const lv_obj_class_t * original_class_p = obj->class_p;
diff --git a/src/tick/lv_tick_private.h b/src/tick/lv_tick_private.h
index cf8ae9b09..a3b7e84fb 100644
--- a/src/tick/lv_tick_private.h
+++ b/src/tick/lv_tick_private.h
@@ -27,7 +27,9 @@ extern "C" {
 typedef struct {
     uint32_t sys_time;
     volatile uint8_t sys_irq_flag;
+    __attribute__(( fptrgroup("lv_tick_get_cb") ))
     lv_tick_get_cb_t tick_get_cb;
+    __attribute__(( fptrgroup("lv_tick_delay_cb") ))
     lv_delay_cb_t delay_cb;
 } lv_tick_state_t;
 
diff --git a/src/widgets/animimage/lv_animimage.c b/src/widgets/animimage/lv_animimage.c
index 548c48c8c..9c6b89095 100644
--- a/src/widgets/animimage/lv_animimage.c
+++ b/src/widgets/animimage/lv_animimage.c
@@ -164,6 +164,7 @@ static void lv_animimg_constructor(const lv_obj_class_t * class_p, lv_obj_t * ob
     lv_anim_set_repeat_count(&animimg->anim, LV_ANIM_REPEAT_INFINITE);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void index_change(lv_obj_t * obj, int32_t idx)
 {
     lv_animimg_t * animimg = (lv_animimg_t *)obj;
diff --git a/src/widgets/bar/lv_bar.c b/src/widgets/bar/lv_bar.c
index 6fc7b231a..3bb4fdf30 100644
--- a/src/widgets/bar/lv_bar.c
+++ b/src/widgets/bar/lv_bar.c
@@ -626,6 +626,7 @@ static void lv_bar_event(const lv_obj_class_t * class_p, lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void lv_bar_anim(void * var, int32_t value)
 {
     lv_bar_anim_t * bar_anim = var;
@@ -633,6 +634,7 @@ static void lv_bar_anim(void * var, int32_t value)
     lv_obj_invalidate(bar_anim->bar);
 }
 
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 static void lv_bar_anim_completed(lv_anim_t * a)
 {
     lv_bar_anim_t * var = a->var;
diff --git a/src/widgets/calendar/lv_calendar.c b/src/widgets/calendar/lv_calendar.c
index 560e24a1d..c65fcfd94 100644
--- a/src/widgets/calendar/lv_calendar.c
+++ b/src/widgets/calendar/lv_calendar.c
@@ -336,6 +336,7 @@ static void lv_calendar_constructor(const lv_obj_class_t * class_p, lv_obj_t * o
     lv_calendar_set_today_date(obj, calendar->today.year, calendar->today.month, calendar->today.day);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void draw_task_added_event_cb(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_current_target(e);
diff --git a/src/widgets/calendar/lv_calendar_header_arrow.c b/src/widgets/calendar/lv_calendar_header_arrow.c
index 09b201d04..dcdf1485b 100644
--- a/src/widgets/calendar/lv_calendar_header_arrow.c
+++ b/src/widgets/calendar/lv_calendar_header_arrow.c
@@ -102,6 +102,7 @@ static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
     lv_obj_send_event(obj, LV_EVENT_VALUE_CHANGED, NULL);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void month_event_cb(lv_event_t * e)
 {
     lv_obj_t * btn = lv_event_get_current_target(e);
@@ -142,6 +143,7 @@ static void month_event_cb(lv_event_t * e)
     lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * header = lv_event_get_current_target(e);
diff --git a/src/widgets/calendar/lv_calendar_header_dropdown.c b/src/widgets/calendar/lv_calendar_header_dropdown.c
index 41fe53a82..58e805b32 100644
--- a/src/widgets/calendar/lv_calendar_header_dropdown.c
+++ b/src/widgets/calendar/lv_calendar_header_dropdown.c
@@ -123,6 +123,7 @@ static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
     lv_obj_send_event(obj, LV_EVENT_VALUE_CHANGED, NULL);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void month_event_cb(lv_event_t * e)
 {
     lv_obj_t * dropdown = lv_event_get_current_target(e);
@@ -138,6 +139,7 @@ static void month_event_cb(lv_event_t * e)
     lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void year_event_cb(lv_event_t * e)
 {
     lv_obj_t * dropdown = lv_event_get_current_target(e);
@@ -160,6 +162,7 @@ static void year_event_cb(lv_event_t * e)
     lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * header = lv_event_get_current_target(e);
diff --git a/src/widgets/keyboard/lv_keyboard.c b/src/widgets/keyboard/lv_keyboard.c
index e781eb397..343d3c54f 100644
--- a/src/widgets/keyboard/lv_keyboard.c
+++ b/src/widgets/keyboard/lv_keyboard.c
@@ -305,7 +305,7 @@ bool lv_keyboard_get_popovers(const lv_obj_t * obj)
 /*=====================
  * Other functions
  *====================*/
-
+__attribute__(( fptrgroup("lv_event_cb") ))
 void lv_keyboard_def_event_cb(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_current_target(e);
diff --git a/src/widgets/label/lv_label.c b/src/widgets/label/lv_label.c
index ae0711251..5fb95bf9b 100644
--- a/src/widgets/label/lv_label.c
+++ b/src/widgets/label/lv_label.c
@@ -893,6 +893,7 @@ static void overwrite_anim_property(lv_anim_t * dest, const lv_anim_t * src, lv_
  * Refresh the label with its text stored in its extended data
  * @param label pointer to a label object
  */
+#pragma stackfunction 2048
 static void lv_label_refr_text(lv_obj_t * obj)
 {
     lv_label_t * label = (lv_label_t *)obj;
@@ -1262,6 +1263,7 @@ static void lv_label_dot_tmp_free(lv_obj_t * obj)
     label->dot.tmp_ptr   = NULL;
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void set_ofs_x_anim(void * obj, int32_t v)
 {
     lv_label_t * label = (lv_label_t *)obj;
@@ -1269,6 +1271,7 @@ static void set_ofs_x_anim(void * obj, int32_t v)
     lv_obj_invalidate(obj);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void set_ofs_y_anim(void * obj, int32_t v)
 {
     lv_label_t * label = (lv_label_t *)obj;
diff --git a/src/widgets/lottie/lv_lottie.c b/src/widgets/lottie/lv_lottie.c
index 48ae25814..0a0983340 100644
--- a/src/widgets/lottie/lv_lottie.c
+++ b/src/widgets/lottie/lv_lottie.c
@@ -194,6 +194,7 @@ static void lv_lottie_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
     tvg_canvas_destroy(lottie->tvg_canvas);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void anim_exec_cb(void * var, int32_t v)
 {
     lv_lottie_t * lottie = var;
diff --git a/src/widgets/menu/lv_menu.c b/src/widgets/menu/lv_menu.c
index f9b49fc0e..44b3e4ca7 100644
--- a/src/widgets/menu/lv_menu.c
+++ b/src/widgets/menu/lv_menu.c
@@ -707,6 +707,7 @@ static void lv_menu_refr_main_header_mode(lv_obj_t * obj)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void lv_menu_load_page_event_cb(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_current_target(e);
@@ -748,12 +749,14 @@ static void lv_menu_load_page_event_cb(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void lv_menu_obj_delete_event_cb(lv_event_t * e)
 {
     lv_menu_load_page_event_data_t * event_data = lv_event_get_user_data(e);
     lv_free(event_data);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void lv_menu_back_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -793,6 +796,7 @@ static void lv_menu_back_event_cb(lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void lv_menu_value_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * obj = lv_event_get_user_data(e);
diff --git a/src/widgets/msgbox/lv_msgbox.c b/src/widgets/msgbox/lv_msgbox.c
index 98ad81e16..54f98ec86 100644
--- a/src/widgets/msgbox/lv_msgbox.c
+++ b/src/widgets/msgbox/lv_msgbox.c
@@ -275,7 +275,7 @@ void lv_msgbox_close_async(lv_obj_t * obj)
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void msgbox_close_click_event_cb(lv_event_t * e)
 {
     lv_obj_t * btn = lv_event_get_current_target(e);
@@ -283,6 +283,7 @@ static void msgbox_close_click_event_cb(lv_event_t * e)
     lv_msgbox_close(mbox);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void msgbox_size_changed_event_cb(lv_event_t * e)
 {
     lv_obj_t * mbox = lv_event_get_target(e);
diff --git a/src/widgets/roller/lv_roller.c b/src/widgets/roller/lv_roller.c
index b762a1e25..1e62f9b69 100644
--- a/src/widgets/roller/lv_roller.c
+++ b/src/widgets/roller/lv_roller.c
@@ -828,12 +828,14 @@ static int32_t get_selected_label_width(const lv_obj_t * obj)
     return size.x;
 }
 
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 static void scroll_anim_completed_cb(lv_anim_t * a)
 {
     lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
     inf_normalize(obj);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void set_y_anim(void * obj, int32_t v)
 {
     lv_obj_set_y(obj, v);
diff --git a/src/widgets/scale/lv_scale.c b/src/widgets/scale/lv_scale.c
index fbab46018..904745a53 100644
--- a/src/widgets/scale/lv_scale.c
+++ b/src/widgets/scale/lv_scale.c
@@ -1495,6 +1495,7 @@ static void scale_store_section_line_tick_width_compensation(lv_obj_t * obj, con
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void scale_free_line_needle_points_cb(lv_event_t * e)
 {
     lv_point_precise_t * needle_line_points = lv_event_get_user_data(e);
diff --git a/src/widgets/spinner/lv_spinner.c b/src/widgets/spinner/lv_spinner.c
index 18cb0050f..79be8d39e 100644
--- a/src/widgets/spinner/lv_spinner.c
+++ b/src/widgets/spinner/lv_spinner.c
@@ -93,11 +93,13 @@ static void lv_spinner_constructor(const lv_obj_class_t * class_p, lv_obj_t * ob
     lv_spinner_set_anim_params(obj, DEF_TIME, DEF_ARC_ANGLE);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void arc_anim_start_angle(void * obj, int32_t v)
 {
     lv_arc_set_start_angle(obj, (uint32_t) v);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void arc_anim_end_angle(void * obj, int32_t v)
 {
     lv_arc_set_end_angle(obj, (uint32_t) v);
diff --git a/src/widgets/switch/lv_switch.c b/src/widgets/switch/lv_switch.c
index 89b4b6363..1b3f4b557 100644
--- a/src/widgets/switch/lv_switch.c
+++ b/src/widgets/switch/lv_switch.c
@@ -204,6 +204,7 @@ static void draw_main(lv_event_t * e)
     lv_draw_rect(layer, &knob_rect_dsc, &knob_area);
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void lv_switch_anim_exec_cb(void * var, int32_t value)
 {
     lv_switch_t * sw = var;
@@ -214,6 +215,7 @@ static void lv_switch_anim_exec_cb(void * var, int32_t value)
 /**
  * Resets the switch's animation state to "no animation in progress".
  */
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 static void lv_switch_anim_completed(lv_anim_t * a)
 {
     lv_switch_t * sw = a->var;
diff --git a/src/widgets/tabview/lv_tabview.c b/src/widgets/tabview/lv_tabview.c
index 29e3e2e27..8d96788c3 100644
--- a/src/widgets/tabview/lv_tabview.c
+++ b/src/widgets/tabview/lv_tabview.c
@@ -300,6 +300,7 @@ static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void button_clicked_event_cb(lv_event_t * e)
 {
     lv_obj_t * button = lv_event_get_current_target(e);
@@ -309,6 +310,8 @@ static void button_clicked_event_cb(lv_event_t * e)
     lv_tabview_set_active(tv, idx, LV_ANIM_OFF);
 }
 
+#pragma stackfunction 2048
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void cont_scroll_end_event_cb(lv_event_t * e)
 {
     lv_obj_t * cont = lv_event_get_current_target(e);
diff --git a/src/widgets/textarea/lv_textarea.c b/src/widgets/textarea/lv_textarea.c
index 1958371b3..53bd7a19f 100644
--- a/src/widgets/textarea/lv_textarea.c
+++ b/src/widgets/textarea/lv_textarea.c
@@ -1029,6 +1029,7 @@ static void lv_textarea_event(const lv_obj_class_t * class_p, lv_event_t * e)
     }
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void label_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
@@ -1047,6 +1048,7 @@ static void label_event_cb(lv_event_t * e)
  * @param ta pointer to a text area
  * @param hide 1: hide the cursor, 0: show it
  */
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void cursor_blink_anim_cb(void * obj, int32_t show)
 {
     lv_textarea_t * ta = (lv_textarea_t *)obj;
@@ -1069,6 +1071,7 @@ static void cursor_blink_anim_cb(void * obj, int32_t show)
  * @param ta unused
  * @param x unused
  */
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 static void pwd_char_hider_anim(void * obj, int32_t x)
 {
     LV_UNUSED(obj);
@@ -1079,6 +1082,7 @@ static void pwd_char_hider_anim(void * obj, int32_t x)
  * Call when an animation is ready to convert all characters to '*'
  * @param a pointer to the animation
  */
+__attribute__(( fptrgroup("lv_anim_completed_cb") ))
 static void pwd_char_hider_anim_completed(lv_anim_t * a)
 {
     lv_obj_t * obj = a->var;
diff --git a/src/widgets/tileview/lv_tileview.c b/src/widgets/tileview/lv_tileview.c
index 8844a89ae..fe0f05a61 100644
--- a/src/widgets/tileview/lv_tileview.c
+++ b/src/widgets/tileview/lv_tileview.c
@@ -148,6 +148,7 @@ static void lv_tileview_tile_constructor(const lv_obj_class_t * class_p, lv_obj_
     lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void tileview_event_cb(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/tests/src/test_cases/test_anim_timeline.c b/tests/src/test_cases/test_anim_timeline.c
index c97f7340f..157cae680 100644
--- a/tests/src/test_cases/test_anim_timeline.c
+++ b/tests/src/test_cases/test_anim_timeline.c
@@ -439,6 +439,7 @@ void test_anim_timeline_delay(void)
 
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 void anim1_exec_cb(void * var, int32_t v)
 {
     LV_UNUSED(var);
@@ -455,6 +456,7 @@ void anim1_completed(lv_anim_t * a)
     anim1_completed_called++;
 }
 
+__attribute__(( fptrgroup("lv_anim_exec_cb") ))
 void anim2_exec_cb(void * var, int32_t v)
 {
     LV_UNUSED(var);
diff --git a/tests/src/test_cases/widgets/test_btnmatrix.c b/tests/src/test_cases/widgets/test_btnmatrix.c
index dbfb1b9cd..174f8e833 100644
--- a/tests/src/test_cases/widgets/test_btnmatrix.c
+++ b/tests/src/test_cases/widgets/test_btnmatrix.c
@@ -289,6 +289,7 @@ void test_button_matrix_get_button_text_works(void)
 }
 
 /* Common event handler for all the consecutive test cases. */
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/tests/src/test_cases/widgets/test_checkbox.c b/tests/src/test_cases/widgets/test_checkbox.c
index cdfeed51f..1f27e4a65 100644
--- a/tests/src/test_cases/widgets/test_checkbox.c
+++ b/tests/src/test_cases/widgets/test_checkbox.c
@@ -18,6 +18,7 @@ static lv_obj_t * checkbox = NULL;
 
 static volatile bool event_called = false;
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t code = lv_event_get_code(e);
diff --git a/tests/src/test_cases/widgets/test_switch.c b/tests/src/test_cases/widgets/test_switch.c
index aff45bf73..73423fbef 100644
--- a/tests/src/test_cases/widgets/test_switch.c
+++ b/tests/src/test_cases/widgets/test_switch.c
@@ -31,6 +31,7 @@ static void mouse_click_on_switch(void)
     lv_test_mouse_click_at(sw->coords.x1, sw->coords.y1);
 }
 
+__attribute__(( fptrgroup("lv_event_cb") ))
 static void event_handler(lv_event_t * e)
 {
     lv_event_code_t event = lv_event_get_code(e);
